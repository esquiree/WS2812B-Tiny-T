
Attiny85_WS2812B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00001382  00001416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013f  008000b0  008000b0  00001466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c9e  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000390  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000adf  00000000  00000000  0000259a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f6  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c21  00000000  00000000  000037e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004407  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
       2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
       4:	66 c1       	rjmp	.+716    	; 0x2d2 <__vector_2>
       6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
       8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
      1e:	11 24       	eor	r1, r1
      20:	1f be       	out	0x3f, r1	; 63
      22:	cf e5       	ldi	r28, 0x5F	; 95
      24:	d2 e0       	ldi	r29, 0x02	; 2
      26:	de bf       	out	0x3e, r29	; 62
      28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
      2a:	10 e0       	ldi	r17, 0x00	; 0
      2c:	a0 e6       	ldi	r26, 0x60	; 96
      2e:	b0 e0       	ldi	r27, 0x00	; 0
      30:	e2 e8       	ldi	r30, 0x82	; 130
      32:	f3 e1       	ldi	r31, 0x13	; 19
      34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
      36:	05 90       	lpm	r0, Z+
      38:	0d 92       	st	X+, r0
      3a:	a0 3b       	cpi	r26, 0xB0	; 176
      3c:	b1 07       	cpc	r27, r17
      3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a0 eb       	ldi	r26, 0xB0	; 176
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	af 3e       	cpi	r26, 0xEF	; 239
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	c7 d5       	rcall	.+2958   	; 0xbe0 <main>
      52:	95 c9       	rjmp	.-3286   	; 0xfffff37e <__eeprom_end+0xff7ef37e>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <_Z16ws2812_sendarrayPhj>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
      56:	b9 9a       	sbi	0x17, 1	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
      58:	28 b3       	in	r18, 0x18	; 24
      5a:	2d 7f       	andi	r18, 0xFD	; 253
  maskhi |=        ws2812_PORTREG;
      5c:	38 b3       	in	r19, 0x18	; 24
      5e:	32 60       	ori	r19, 0x02	; 2
  
  sreg_prev=SREG;
      60:	4f b7       	in	r20, 0x3f	; 63
  cli();  
      62:	f8 94       	cli

  while (datlen--) {
      64:	61 15       	cp	r22, r1
      66:	71 05       	cpc	r23, r1
      68:	b1 f0       	breq	.+44     	; 0x96 <loop44+0x22>
      6a:	fc 01       	movw	r30, r24
      6c:	68 0f       	add	r22, r24
      6e:	79 1f       	adc	r23, r25
    curbyte=*data++;
      70:	91 91       	ld	r25, Z+

    "       dec   %0    \n\t"    //  '1' [+2] '0' [+2]
    "       brne  loop%=\n\t"    //  '1' [+3] '0' [+4]
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
      72:	88 e0       	ldi	r24, 0x08	; 8

00000074 <loop44>:
      74:	38 bb       	out	0x18, r19	; 24
      76:	00 00       	nop
      78:	00 c0       	rjmp	.+0      	; 0x7a <loop44+0x6>
      7a:	97 ff       	sbrs	r25, 7
      7c:	28 bb       	out	0x18, r18	; 24
      7e:	99 0f       	add	r25, r25
      80:	00 00       	nop
      82:	00 c0       	rjmp	.+0      	; 0x84 <loop44+0x10>
      84:	00 c0       	rjmp	.+0      	; 0x86 <loop44+0x12>
      86:	00 c0       	rjmp	.+0      	; 0x88 <loop44+0x14>
      88:	28 bb       	out	0x18, r18	; 24
      8a:	00 c0       	rjmp	.+0      	; 0x8c <loop44+0x18>
      8c:	8a 95       	dec	r24
      8e:	91 f7       	brne	.-28     	; 0x74 <loop44>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
      90:	e6 17       	cp	r30, r22
      92:	f7 07       	cpc	r31, r23
      94:	69 f7       	brne	.-38     	; 0x70 <_Z16ws2812_sendarrayPhj+0x1a>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
      96:	4f bf       	out	0x3f, r20	; 63
      98:	08 95       	ret

0000009a <_Z7HSV2RGB4cHSV>:
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
}

//Color space conversions
cRGB HSV2RGB(cHSV HSV ){
      9a:	2f 92       	push	r2
      9c:	3f 92       	push	r3
      9e:	4f 92       	push	r4
      a0:	5f 92       	push	r5
      a2:	6f 92       	push	r6
      a4:	7f 92       	push	r7
      a6:	8f 92       	push	r8
      a8:	9f 92       	push	r9
      aa:	af 92       	push	r10
      ac:	bf 92       	push	r11
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	c7 2f       	mov	r28, r23
      c0:	18 2f       	mov	r17, r24
	cRGB RGB;
	int i;
	float f, p, q, t, h, s, v;
	
	h=(float)HSV.h;
      c2:	70 e0       	ldi	r23, 0x00	; 0
      c4:	80 e0       	ldi	r24, 0x00	; 0
      c6:	90 e0       	ldi	r25, 0x00	; 0
      c8:	f2 d6       	rcall	.+3556   	; 0xeae <__floatunsisf>
      ca:	2b 01       	movw	r4, r22
      cc:	3c 01       	movw	r6, r24
	s=(float)HSV.s;
      ce:	6c 2f       	mov	r22, r28
      d0:	70 e0       	ldi	r23, 0x00	; 0
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	eb d6       	rcall	.+3542   	; 0xeae <__floatunsisf>
      d8:	4b 01       	movw	r8, r22
      da:	5c 01       	movw	r10, r24
	v=(float)HSV.v;
      dc:	01 2f       	mov	r16, r17
      de:	61 2f       	mov	r22, r17
      e0:	70 e0       	ldi	r23, 0x00	; 0
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	e3 d6       	rcall	.+3526   	; 0xeae <__floatunsisf>
      e8:	6b 01       	movw	r12, r22
      ea:	7c 01       	movw	r14, r24
	
	s /=255;
      ec:	20 e0       	ldi	r18, 0x00	; 0
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	4f e7       	ldi	r20, 0x7F	; 127
      f2:	53 e4       	ldi	r21, 0x43	; 67
      f4:	c5 01       	movw	r24, r10
      f6:	b4 01       	movw	r22, r8
      f8:	41 d6       	rcall	.+3202   	; 0xd7c <__divsf3>
      fa:	4b 01       	movw	r8, r22
      fc:	5c 01       	movw	r10, r24
	//if( s == 0 ) { // achromatic (grey)
		//RGB.r = RGB.g = RGB.b = v;
		//return RGB;
	//}
	
	h /= 43;            // sector 0 to 5
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	4c e2       	ldi	r20, 0x2C	; 44
     104:	52 e4       	ldi	r21, 0x42	; 66
     106:	c3 01       	movw	r24, r6
     108:	b2 01       	movw	r22, r4
     10a:	38 d6       	rcall	.+3184   	; 0xd7c <__divsf3>
     10c:	2b 01       	movw	r4, r22
     10e:	3c 01       	movw	r6, r24
	i = floor( h );
     110:	0b d7       	rcall	.+3606   	; 0xf28 <floor>
     112:	9c d6       	rcall	.+3384   	; 0xe4c <__fixsfsi>
     114:	eb 01       	movw	r28, r22
	f = h - i;            // factorial part of h
     116:	07 2e       	mov	r0, r23
     118:	00 0c       	add	r0, r0
     11a:	88 0b       	sbc	r24, r24
     11c:	99 0b       	sbc	r25, r25
     11e:	c9 d6       	rcall	.+3474   	; 0xeb2 <__floatsisf>
     120:	9b 01       	movw	r18, r22
     122:	ac 01       	movw	r20, r24
     124:	c3 01       	movw	r24, r6
     126:	b2 01       	movw	r22, r4
     128:	c4 d5       	rcall	.+2952   	; 0xcb2 <__subsf3>
     12a:	2b 01       	movw	r4, r22
     12c:	3c 01       	movw	r6, r24
	p = (unsigned char)(v * ( 1 - s ));
     12e:	a5 01       	movw	r20, r10
     130:	94 01       	movw	r18, r8
     132:	60 e0       	ldi	r22, 0x00	; 0
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e8       	ldi	r24, 0x80	; 128
     138:	9f e3       	ldi	r25, 0x3F	; 63
     13a:	bb d5       	rcall	.+2934   	; 0xcb2 <__subsf3>
     13c:	a7 01       	movw	r20, r14
     13e:	96 01       	movw	r18, r12
     140:	97 d7       	rcall	.+3886   	; 0x1070 <__mulsf3>
     142:	89 d6       	rcall	.+3346   	; 0xe56 <__fixunssfsi>
     144:	36 2e       	mov	r3, r22
	q = (unsigned char)(v * ( 1 - s * f ));
     146:	a3 01       	movw	r20, r6
     148:	92 01       	movw	r18, r4
     14a:	c5 01       	movw	r24, r10
     14c:	b4 01       	movw	r22, r8
     14e:	90 d7       	rcall	.+3872   	; 0x1070 <__mulsf3>
     150:	9b 01       	movw	r18, r22
     152:	ac 01       	movw	r20, r24
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	70 e0       	ldi	r23, 0x00	; 0
     158:	80 e8       	ldi	r24, 0x80	; 128
     15a:	9f e3       	ldi	r25, 0x3F	; 63
     15c:	aa d5       	rcall	.+2900   	; 0xcb2 <__subsf3>
     15e:	a7 01       	movw	r20, r14
     160:	96 01       	movw	r18, r12
     162:	86 d7       	rcall	.+3852   	; 0x1070 <__mulsf3>
     164:	78 d6       	rcall	.+3312   	; 0xe56 <__fixunssfsi>
     166:	26 2e       	mov	r2, r22
	t = (unsigned char)(v * ( 1 - s * ( 1 - f ) ));
     168:	a3 01       	movw	r20, r6
     16a:	92 01       	movw	r18, r4
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	80 e8       	ldi	r24, 0x80	; 128
     172:	9f e3       	ldi	r25, 0x3F	; 63
     174:	9e d5       	rcall	.+2876   	; 0xcb2 <__subsf3>
     176:	a5 01       	movw	r20, r10
     178:	94 01       	movw	r18, r8
     17a:	7a d7       	rcall	.+3828   	; 0x1070 <__mulsf3>
     17c:	9b 01       	movw	r18, r22
     17e:	ac 01       	movw	r20, r24
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	80 e8       	ldi	r24, 0x80	; 128
     186:	9f e3       	ldi	r25, 0x3F	; 63
     188:	94 d5       	rcall	.+2856   	; 0xcb2 <__subsf3>
     18a:	a7 01       	movw	r20, r14
     18c:	96 01       	movw	r18, r12
     18e:	70 d7       	rcall	.+3808   	; 0x1070 <__mulsf3>
     190:	62 d6       	rcall	.+3268   	; 0xe56 <__fixunssfsi>
	
	switch( i ) {
     192:	c2 30       	cpi	r28, 0x02	; 2
     194:	d1 05       	cpc	r29, r1
     196:	79 f0       	breq	.+30     	; 0x1b6 <_Z7HSV2RGB4cHSV+0x11c>
     198:	2c f4       	brge	.+10     	; 0x1a4 <_Z7HSV2RGB4cHSV+0x10a>
     19a:	20 97       	sbiw	r28, 0x00	; 0
     19c:	d9 f0       	breq	.+54     	; 0x1d4 <_Z7HSV2RGB4cHSV+0x13a>
     19e:	21 97       	sbiw	r28, 0x01	; 1
     1a0:	39 f0       	breq	.+14     	; 0x1b0 <_Z7HSV2RGB4cHSV+0x116>
     1a2:	16 c0       	rjmp	.+44     	; 0x1d0 <_Z7HSV2RGB4cHSV+0x136>
     1a4:	c3 30       	cpi	r28, 0x03	; 3
     1a6:	d1 05       	cpc	r29, r1
     1a8:	59 f0       	breq	.+22     	; 0x1c0 <_Z7HSV2RGB4cHSV+0x126>
     1aa:	24 97       	sbiw	r28, 0x04	; 4
     1ac:	69 f0       	breq	.+26     	; 0x1c8 <_Z7HSV2RGB4cHSV+0x12e>
     1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <_Z7HSV2RGB4cHSV+0x136>
		RGB.g = t;
		RGB.b = p;
		break;
		case 1:
		RGB.r = q;
		RGB.g = v;
     1b0:	61 2f       	mov	r22, r17
		RGB.r = v;
		RGB.g = t;
		RGB.b = p;
		break;
		case 1:
		RGB.r = q;
     1b2:	02 2d       	mov	r16, r2
     1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <_Z7HSV2RGB4cHSV+0x13a>
		break;
		case 2:
		RGB.r = p;
		RGB.g = v;
		RGB.b = t;
		break;
     1b6:	86 2f       	mov	r24, r22
		RGB.g = v;
		RGB.b = p;
		break;
		case 2:
		RGB.r = p;
		RGB.g = v;
     1b8:	61 2f       	mov	r22, r17
		RGB.r = q;
		RGB.g = v;
		RGB.b = p;
		break;
		case 2:
		RGB.r = p;
     1ba:	03 2d       	mov	r16, r3
		RGB.g = v;
		RGB.b = t;
     1bc:	38 2e       	mov	r3, r24
		break;
     1be:	0a c0       	rjmp	.+20     	; 0x1d4 <_Z7HSV2RGB4cHSV+0x13a>
		case 3:
		RGB.r = p;
     1c0:	03 2d       	mov	r16, r3
		RGB.g = q;
		RGB.b = v;
     1c2:	31 2e       	mov	r3, r17
		RGB.g = v;
		RGB.b = t;
		break;
		case 3:
		RGB.r = p;
		RGB.g = q;
     1c4:	62 2d       	mov	r22, r2
		RGB.b = v;
		break;
     1c6:	06 c0       	rjmp	.+12     	; 0x1d4 <_Z7HSV2RGB4cHSV+0x13a>
		case 4:
		RGB.r = t;
		RGB.g = p;
		RGB.b = v;
		break;
     1c8:	06 2f       	mov	r16, r22
		RGB.g = q;
		RGB.b = v;
		break;
		case 4:
		RGB.r = t;
		RGB.g = p;
     1ca:	63 2d       	mov	r22, r3
		RGB.b = v;
     1cc:	31 2e       	mov	r3, r17
		break;
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <_Z7HSV2RGB4cHSV+0x13a>
		default:        // case 5:
		RGB.r = v;
		RGB.g = p;
     1d0:	63 2d       	mov	r22, r3
		RGB.b = q;
     1d2:	32 2c       	mov	r3, r2
		break;
	}
	return RGB;
}
     1d4:	70 2f       	mov	r23, r16
     1d6:	83 2d       	mov	r24, r3
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	bf 90       	pop	r11
     1ea:	af 90       	pop	r10
     1ec:	9f 90       	pop	r9
     1ee:	8f 90       	pop	r8
     1f0:	7f 90       	pop	r7
     1f2:	6f 90       	pop	r6
     1f4:	5f 90       	pop	r5
     1f6:	4f 90       	pop	r4
     1f8:	3f 90       	pop	r3
     1fa:	2f 90       	pop	r2
     1fc:	08 95       	ret

000001fe <_Z18write_WS2812B_dataP4cHSV>:





void write_WS2812B_data(cHSV *HSVColorData){
     1fe:	ef 92       	push	r14
     200:	ff 92       	push	r15
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	7c 01       	movw	r14, r24
     20c:	00 e0       	ldi	r16, 0x00	; 0
     20e:	10 e0       	ldi	r17, 0x00	; 0
	cHSV tempData;
	for(uint8_t i = 0; i < MAXPIX; i++)
	{
		tempData = HSVColorData[i]; 
     210:	f7 01       	movw	r30, r14
     212:	30 81       	ld	r19, Z
     214:	21 81       	ldd	r18, Z+1	; 0x01
     216:	f3 e0       	ldi	r31, 0x03	; 3
     218:	ef 0e       	add	r14, r31
     21a:	f1 1c       	adc	r15, r1
     21c:	f7 01       	movw	r30, r14
     21e:	31 97       	sbiw	r30, 0x01	; 1
		tempData.v /= BRIGHTNESS_DEVISOR;
     220:	80 81       	ld	r24, Z
     222:	60 91 e1 00 	lds	r22, 0x00E1
     226:	8f d7       	rcall	.+3870   	; 0x1146 <__udivmodqi4>
		
		leds_out[i] = HSV2RGB(tempData);
     228:	e8 01       	movw	r28, r16
     22a:	cc 0f       	add	r28, r28
     22c:	dd 1f       	adc	r29, r29
     22e:	c0 0f       	add	r28, r16
     230:	d1 1f       	adc	r29, r17
     232:	cd 51       	subi	r28, 0x1D	; 29
     234:	df 4f       	sbci	r29, 0xFF	; 255
     236:	63 2f       	mov	r22, r19
     238:	72 2f       	mov	r23, r18
     23a:	2f df       	rcall	.-418    	; 0x9a <_Z7HSV2RGB4cHSV>
     23c:	68 83       	st	Y, r22
     23e:	79 83       	std	Y+1, r23	; 0x01
     240:	8a 83       	std	Y+2, r24	; 0x02
     242:	0f 5f       	subi	r16, 0xFF	; 255
     244:	1f 4f       	sbci	r17, 0xFF	; 255



void write_WS2812B_data(cHSV *HSVColorData){
	cHSV tempData;
	for(uint8_t i = 0; i < MAXPIX; i++)
     246:	08 32       	cpi	r16, 0x28	; 40
     248:	11 05       	cpc	r17, r1
     24a:	11 f7       	brne	.-60     	; 0x210 <_Z18write_WS2812B_dataP4cHSV+0x12>
		tempData = HSVColorData[i]; 
		tempData.v /= BRIGHTNESS_DEVISOR;
		
		leds_out[i] = HSV2RGB(tempData);
	}
	ws2812_sendarray((uint8_t *)leds_out,MAXPIX*3);
     24c:	68 e7       	ldi	r22, 0x78	; 120
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	83 ee       	ldi	r24, 0xE3	; 227
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	00 df       	rcall	.-512    	; 0x56 <_Z16ws2812_sendarrayPhj>
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	08 95       	ret

00000264 <_Z15setup_Hue_Tablev>:

void setup_Hue_Table(void){
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	a7 ea       	ldi	r26, 0xA7	; 167
     26a:	b0 e0       	ldi	r27, 0x00	; 0
     26c:	e5 ed       	ldi	r30, 0xD5	; 213
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	20 ef       	ldi	r18, 0xF0	; 240
     272:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i < HUELISTLENGTH; i++)
	{
		colorList[i].h = colorHueList[i];
		colorList[i].s = 255;
     274:	8f ef       	ldi	r24, 0xFF	; 255
}

void setup_Hue_Table(void){
	for(uint8_t i = 0; i < HUELISTLENGTH; i++)
	{
		colorList[i].h = colorHueList[i];
     276:	9d 91       	ld	r25, X+
     278:	ef 01       	movw	r28, r30
     27a:	22 97       	sbiw	r28, 0x02	; 2
     27c:	98 83       	st	Y, r25
     27e:	21 96       	adiw	r28, 0x01	; 1
		colorList[i].s = 255;
     280:	88 83       	st	Y, r24
		colorList[i].v = 255;
     282:	80 83       	st	Z, r24
     284:	33 96       	adiw	r30, 0x03	; 3
	}
	ws2812_sendarray((uint8_t *)leds_out,MAXPIX*3);
}

void setup_Hue_Table(void){
	for(uint8_t i = 0; i < HUELISTLENGTH; i++)
     286:	e2 17       	cp	r30, r18
     288:	f3 07       	cpc	r31, r19
     28a:	a9 f7       	brne	.-22     	; 0x276 <_Z15setup_Hue_Tablev+0x12>
	{
		colorList[i].h = colorHueList[i];
		colorList[i].s = 255;
		colorList[i].v = 255;
	}
	colorList[8].s = 0;
     28c:	10 92 ec 01 	sts	0x01EC, r1
     290:	e3 ec       	ldi	r30, 0xC3	; 195
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	21 ee       	ldi	r18, 0xE1	; 225
     296:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 10; i++)
	{
		zoneColor[i].s = 255;
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	df 01       	movw	r26, r30
     29c:	11 97       	sbiw	r26, 0x01	; 1
     29e:	8c 93       	st	X, r24
		zoneColor[i].v = 255;
     2a0:	80 83       	st	Z, r24
     2a2:	33 96       	adiw	r30, 0x03	; 3
		colorList[i].h = colorHueList[i];
		colorList[i].s = 255;
		colorList[i].v = 255;
	}
	colorList[8].s = 0;
	for (uint8_t i = 0; i < 10; i++)
     2a4:	e2 17       	cp	r30, r18
     2a6:	f3 07       	cpc	r31, r19
     2a8:	c1 f7       	brne	.-16     	; 0x29a <_Z15setup_Hue_Tablev+0x36>
	{
		zoneColor[i].s = 255;
		zoneColor[i].v = 255;
	}
	
}
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <_Z12EEPROM_writehh>:

void EEPROM_write(uint8_t uiAddress, uint8_t ucData) //Stolen from https://stackoverflow.com/questions/4412111/avr-eeprom-read-write
{
	while(EECR & (1<<EEPE));    /* Wait for completion of previous write */
     2b0:	e1 99       	sbic	0x1c, 1	; 28
     2b2:	fe cf       	rjmp	.-4      	; 0x2b0 <_Z12EEPROM_writehh>
	EEARH = 0x00;
     2b4:	1f ba       	out	0x1f, r1	; 31
	EEARL = uiAddress;
     2b6:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     2b8:	6d bb       	out	0x1d, r22	; 29
	cli();
     2ba:	f8 94       	cli
	EECR |= (1<<EEMPE);     /* Write logical one to EEMPE */
     2bc:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1<<EEPE);      /* Start eeprom write by setting EEPE */
     2be:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
     2c0:	78 94       	sei
     2c2:	08 95       	ret

000002c4 <_Z11EEPROM_readh>:
}
unsigned char EEPROM_read(uint8_t uiAddress) //Stolen from https://stackoverflow.com/questions/4412111/avr-eeprom-read-write
{
	while(EECR & (1<<EEPE)); /* Wait for completion of previous write */
     2c4:	e1 99       	sbic	0x1c, 1	; 28
     2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <_Z11EEPROM_readh>

	EEARH = (uiAddress>>8);  /* Set up address register */
     2c8:	1f ba       	out	0x1f, r1	; 31
	EEARL = uiAddress;
     2ca:	8e bb       	out	0x1e, r24	; 30

	EECR |= (1<<EERE);       /* Start eeprom read by writing EERE */
     2cc:	e0 9a       	sbi	0x1c, 0	; 28

	return EEDR;             /* Return data from Data Register */
     2ce:	8d b3       	in	r24, 0x1d	; 29
}
     2d0:	08 95       	ret

000002d2 <__vector_2>:

//Button Press Interrupt
ISR(PCINT0_vect)
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	2f 93       	push	r18
     2ec:	3f 93       	push	r19
     2ee:	4f 93       	push	r20
     2f0:	5f 93       	push	r21
     2f2:	6f 93       	push	r22
     2f4:	7f 93       	push	r23
     2f6:	8f 93       	push	r24
     2f8:	9f 93       	push	r25
     2fa:	af 93       	push	r26
     2fc:	bf 93       	push	r27
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	ef 93       	push	r30
     304:	ff 93       	push	r31
	
	if (coolDown == 0)
     306:	80 91 df 00 	lds	r24, 0x00DF
     30a:	81 11       	cpse	r24, r1
     30c:	9a c0       	rjmp	.+308    	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
	{
		coolDown = 50;
     30e:	82 e3       	ldi	r24, 0x32	; 50
     310:	80 93 df 00 	sts	0x00DF, r24
		if ((PINB&(1<<PB2)) == 0)
     314:	b2 99       	sbic	0x16, 2	; 22
     316:	95 c0       	rjmp	.+298    	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	84 e3       	ldi	r24, 0x34	; 52
     31c:	9c e0       	ldi	r25, 0x0C	; 12
     31e:	21 50       	subi	r18, 0x01	; 1
     320:	80 40       	sbci	r24, 0x00	; 0
     322:	90 40       	sbci	r25, 0x00	; 0
     324:	e1 f7       	brne	.-8      	; 0x31e <__vector_2+0x4c>
     326:	00 c0       	rjmp	.+0      	; 0x328 <__vector_2+0x56>
     328:	00 00       	nop
		{
			_delay_ms(250);
			if (!((PINB&(1<<PB2)) == 0))
     32a:	b2 9b       	sbis	0x16, 2	; 22
     32c:	0f c0       	rjmp	.+30     	; 0x34c <__vector_2+0x7a>
			{
				mode++;
     32e:	80 91 e0 00 	lds	r24, 0x00E0
     332:	8f 5f       	subi	r24, 0xFF	; 255
				if (mode > 4){ //Max mode options
     334:	85 30       	cpi	r24, 0x05	; 5
     336:	18 f4       	brcc	.+6      	; 0x33e <__vector_2+0x6c>
		if ((PINB&(1<<PB2)) == 0)
		{
			_delay_ms(250);
			if (!((PINB&(1<<PB2)) == 0))
			{
				mode++;
     338:	80 93 e0 00 	sts	0x00E0, r24
     33c:	02 c0       	rjmp	.+4      	; 0x342 <__vector_2+0x70>
				if (mode > 4){ //Max mode options
					mode = 0;
     33e:	10 92 e0 00 	sts	0x00E0, r1
				}
				
				EEPROM_write(0x06,mode);
     342:	60 91 e0 00 	lds	r22, 0x00E0
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	b3 df       	rcall	.-154    	; 0x2b0 <_Z12EEPROM_writehh>
     34a:	7b c0       	rjmp	.+246    	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
			}
			else{
				if ((PINB&(1<<PB2)) == 0)
     34c:	b2 99       	sbic	0x16, 2	; 22
     34e:	0e c0       	rjmp	.+28     	; 0x36c <__vector_2+0x9a>
				{
					colorIndex++;
     350:	80 91 ee 01 	lds	r24, 0x01EE
     354:	8f 5f       	subi	r24, 0xFF	; 255
					if (colorIndex > HUELISTLENGTH)
     356:	8a 30       	cpi	r24, 0x0A	; 10
     358:	18 f4       	brcc	.+6      	; 0x360 <__vector_2+0x8e>
				EEPROM_write(0x06,mode);
			}
			else{
				if ((PINB&(1<<PB2)) == 0)
				{
					colorIndex++;
     35a:	80 93 ee 01 	sts	0x01EE, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <__vector_2+0x92>
					if (colorIndex > HUELISTLENGTH)
					{
						colorIndex = 0;
     360:	10 92 ee 01 	sts	0x01EE, r1
					}
					EEPROM_write(0x05,colorIndex);
     364:	60 91 ee 01 	lds	r22, 0x01EE
     368:	85 e0       	ldi	r24, 0x05	; 5
     36a:	a2 df       	rcall	.-188    	; 0x2b0 <_Z12EEPROM_writehh>
				}
				while ((PINB&(1<<PB2)) == 0)
     36c:	b2 99       	sbic	0x16, 2	; 22
     36e:	60 c0       	rjmp	.+192    	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
				{
					_delay_us(100);
					tempHSV.h = colorHueList[colorIndex];
     370:	06 eb       	ldi	r16, 0xB6	; 182
     372:	10 e0       	ldi	r17, 0x00	; 0
					tempHSV.s = 255;
     374:	bb 24       	eor	r11, r11
     376:	ba 94       	dec	r11
					{
						tempHSV.s = 0;
					}
					if (colorIndex == HUELISTLENGTH)
					{
						tempHSV.h = inceasingHue.h;
     378:	0f 2e       	mov	r0, r31
     37a:	fc eb       	ldi	r31, 0xBC	; 188
     37c:	ef 2e       	mov	r14, r31
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	ff 2e       	mov	r15, r31
     382:	f0 2d       	mov	r31, r0
     384:	0f 2e       	mov	r0, r31
     386:	f3 ee       	ldi	r31, 0xE3	; 227
     388:	cf 2e       	mov	r12, r31
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	df 2e       	mov	r13, r31
     38e:	f0 2d       	mov	r31, r0
     390:	cb e5       	ldi	r28, 0x5B	; 91
     392:	d1 e0       	ldi	r29, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     394:	ef e8       	ldi	r30, 0x8F	; 143
     396:	f1 e0       	ldi	r31, 0x01	; 1
     398:	31 97       	sbiw	r30, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <__vector_2+0xc6>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <__vector_2+0xcc>
     39e:	00 00       	nop
					EEPROM_write(0x05,colorIndex);
				}
				while ((PINB&(1<<PB2)) == 0)
				{
					_delay_us(100);
					tempHSV.h = colorHueList[colorIndex];
     3a0:	80 91 ee 01 	lds	r24, 0x01EE
     3a4:	e8 2f       	mov	r30, r24
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	e9 55       	subi	r30, 0x59	; 89
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	90 81       	ld	r25, Z
     3ae:	f8 01       	movw	r30, r16
     3b0:	90 83       	st	Z, r25
					tempHSV.s = 255;
     3b2:	b1 82       	std	Z+1, r11	; 0x01
					if (colorIndex == HUELISTLENGTH-1)
     3b4:	88 30       	cpi	r24, 0x08	; 8
     3b6:	11 f4       	brne	.+4      	; 0x3bc <__vector_2+0xea>
					{
						tempHSV.s = 0;
     3b8:	11 82       	std	Z+1, r1	; 0x01
     3ba:	06 c0       	rjmp	.+12     	; 0x3c8 <__vector_2+0xf6>
					}
					if (colorIndex == HUELISTLENGTH)
     3bc:	89 30       	cpi	r24, 0x09	; 9
     3be:	21 f4       	brne	.+8      	; 0x3c8 <__vector_2+0xf6>
					{
						tempHSV.h = inceasingHue.h;
     3c0:	f7 01       	movw	r30, r14
     3c2:	80 81       	ld	r24, Z
     3c4:	f8 01       	movw	r30, r16
     3c6:	80 83       	st	Z, r24
					}
					tempHSV.v = 255.0/BRIGHTNESS_DEVISOR;
     3c8:	60 91 e1 00 	lds	r22, 0x00E1
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	6f d5       	rcall	.+2782   	; 0xeb2 <__floatsisf>
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	8f e7       	ldi	r24, 0x7F	; 127
     3de:	93 e4       	ldi	r25, 0x43	; 67
     3e0:	cd d4       	rcall	.+2458   	; 0xd7c <__divsf3>
     3e2:	39 d5       	rcall	.+2674   	; 0xe56 <__fixunssfsi>
     3e4:	f8 01       	movw	r30, r16
     3e6:	62 83       	std	Z+2, r22	; 0x02
					
					tempRGB = HSV2RGB(tempHSV);
     3e8:	60 91 b6 00 	lds	r22, 0x00B6
     3ec:	70 91 b7 00 	lds	r23, 0x00B7
     3f0:	80 91 b8 00 	lds	r24, 0x00B8
     3f4:	52 de       	rcall	.-860    	; 0x9a <_Z7HSV2RGB4cHSV>
     3f6:	60 93 b3 00 	sts	0x00B3, r22
     3fa:	70 93 b4 00 	sts	0x00B4, r23
     3fe:	80 93 b5 00 	sts	0x00B5, r24
					
					inceasingHue.h++;
     402:	f7 01       	movw	r30, r14
     404:	80 81       	ld	r24, Z
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	80 83       	st	Z, r24
     40a:	f6 01       	movw	r30, r12
					for (uint8_t i = 0; i<MAXPIX; i++)
					{
						leds_out[i] = tempRGB;
     40c:	80 91 b3 00 	lds	r24, 0x00B3
     410:	90 91 b4 00 	lds	r25, 0x00B4
     414:	a0 91 b5 00 	lds	r26, 0x00B5
     418:	81 93       	st	Z+, r24
     41a:	91 93       	st	Z+, r25
     41c:	a1 93       	st	Z+, r26
					tempHSV.v = 255.0/BRIGHTNESS_DEVISOR;
					
					tempRGB = HSV2RGB(tempHSV);
					
					inceasingHue.h++;
					for (uint8_t i = 0; i<MAXPIX; i++)
     41e:	ec 17       	cp	r30, r28
     420:	fd 07       	cpc	r31, r29
     422:	a1 f7       	brne	.-24     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
					{
						leds_out[i] = tempRGB;
					}
					ws2812_sendarray((uint8_t *)leds_out,MAXPIX*3);
     424:	68 e7       	ldi	r22, 0x78	; 120
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	c6 01       	movw	r24, r12
     42a:	15 de       	rcall	.-982    	; 0x56 <_Z16ws2812_sendarrayPhj>
					{
						colorIndex = 0;
					}
					EEPROM_write(0x05,colorIndex);
				}
				while ((PINB&(1<<PB2)) == 0)
     42c:	b2 9b       	sbis	0x16, 2	; 22
     42e:	b2 cf       	rjmp	.-156    	; 0x394 <__vector_2+0xc2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	ff ef       	ldi	r31, 0xFF	; 255
     432:	20 e7       	ldi	r18, 0x70	; 112
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	f1 50       	subi	r31, 0x01	; 1
     438:	20 40       	sbci	r18, 0x00	; 0
     43a:	80 40       	sbci	r24, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     440:	00 00       	nop
				}
				_delay_ms(50);
			}
		}
	}	
}
     442:	ff 91       	pop	r31
     444:	ef 91       	pop	r30
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	bf 91       	pop	r27
     44c:	af 91       	pop	r26
     44e:	9f 91       	pop	r25
     450:	8f 91       	pop	r24
     452:	7f 91       	pop	r23
     454:	6f 91       	pop	r22
     456:	5f 91       	pop	r21
     458:	4f 91       	pop	r20
     45a:	3f 91       	pop	r19
     45c:	2f 91       	pop	r18
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	bf 90       	pop	r11
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
     470:	0f 90       	pop	r0
     472:	1f 90       	pop	r1
     474:	18 95       	reti

00000476 <_Z10fade2Blackh>:

void fade2Black(uint8_t fadeAmount){
     476:	ed e5       	ldi	r30, 0x5D	; 93
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	65 ed       	ldi	r22, 0xD5	; 213
     47c:	71 e0       	ldi	r23, 0x01	; 1
	for (uint8_t i = 0; i < MAXPIX; i++)
	{
		if ((leds_next[i].v - fadeAmount)> 0)
     47e:	48 2f       	mov	r20, r24
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	90 81       	ld	r25, Z
     484:	29 2f       	mov	r18, r25
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	24 1b       	sub	r18, r20
     48a:	35 0b       	sbc	r19, r21
     48c:	12 16       	cp	r1, r18
     48e:	13 06       	cpc	r1, r19
     490:	1c f4       	brge	.+6      	; 0x498 <_Z10fade2Blackh+0x22>
		{
			leds_next[i].v -= fadeAmount;
     492:	98 1b       	sub	r25, r24
     494:	90 83       	st	Z, r25
     496:	01 c0       	rjmp	.+2      	; 0x49a <_Z10fade2Blackh+0x24>
		}
		else
		{
			leds_next[i].v = 0;
     498:	10 82       	st	Z, r1
     49a:	33 96       	adiw	r30, 0x03	; 3
		}
	}	
}

void fade2Black(uint8_t fadeAmount){
	for (uint8_t i = 0; i < MAXPIX; i++)
     49c:	e6 17       	cp	r30, r22
     49e:	f7 07       	cpc	r31, r23
     4a0:	81 f7       	brne	.-32     	; 0x482 <_Z10fade2Blackh+0xc>
		else
		{
			leds_next[i].v = 0;
		}
	}
}
     4a2:	08 95       	ret

000004a4 <_Z6mode_0v>:


void mode_0(void){
	tempColor = colorList[colorIndex];
     4a4:	20 91 ee 01 	lds	r18, 0x01EE
	if (colorIndex == HUELISTLENGTH)
     4a8:	29 30       	cpi	r18, 0x09	; 9
     4aa:	19 f5       	brne	.+70     	; 0x4f2 <_Z6mode_0v+0x4e>
	{
		tempColor = inceasingHue;
     4ac:	80 91 bc 00 	lds	r24, 0x00BC
     4b0:	90 91 bd 00 	lds	r25, 0x00BD
     4b4:	a0 91 be 00 	lds	r26, 0x00BE
     4b8:	80 93 b9 00 	sts	0x00B9, r24
     4bc:	90 93 ba 00 	sts	0x00BA, r25
     4c0:	a0 93 bb 00 	sts	0x00BB, r26
     4c4:	28 c0       	rjmp	.+80     	; 0x516 <_Z6mode_0v+0x72>
	}
	
	for (uint8_t i = 0; i <MAXPIX; i++)
	{
		leds_next[i] = tempColor;
     4c6:	80 91 b9 00 	lds	r24, 0x00B9
     4ca:	90 91 ba 00 	lds	r25, 0x00BA
     4ce:	a0 91 bb 00 	lds	r26, 0x00BB
     4d2:	81 93       	st	Z+, r24
     4d4:	91 93       	st	Z+, r25
     4d6:	a1 93       	st	Z+, r26
	if (colorIndex == HUELISTLENGTH)
	{
		tempColor = inceasingHue;
	}
	
	for (uint8_t i = 0; i <MAXPIX; i++)
     4d8:	e2 17       	cp	r30, r18
     4da:	f3 07       	cpc	r31, r19
     4dc:	a1 f7       	brne	.-24     	; 0x4c6 <_Z6mode_0v+0x22>
     4de:	8f e9       	ldi	r24, 0x9F	; 159
     4e0:	9f e0       	ldi	r25, 0x0F	; 15
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <_Z6mode_0v+0x3e>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_Z6mode_0v+0x44>
     4e8:	00 00       	nop
	{
		leds_next[i] = tempColor;
	}
	
	_delay_ms(1);
	write_WS2812B_data(leds_next);
     4ea:	8b e5       	ldi	r24, 0x5B	; 91
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	87 de       	rcall	.-754    	; 0x1fe <_Z18write_WS2812B_dataP4cHSV>
     4f0:	08 95       	ret
	}
}


void mode_0(void){
	tempColor = colorList[colorIndex];
     4f2:	82 2f       	mov	r24, r18
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	82 0f       	add	r24, r18
     4f8:	91 1d       	adc	r25, r1
     4fa:	82 0f       	add	r24, r18
     4fc:	91 1d       	adc	r25, r1
     4fe:	fc 01       	movw	r30, r24
     500:	ed 52       	subi	r30, 0x2D	; 45
     502:	fe 4f       	sbci	r31, 0xFE	; 254
     504:	80 81       	ld	r24, Z
     506:	91 81       	ldd	r25, Z+1	; 0x01
     508:	a2 81       	ldd	r26, Z+2	; 0x02
     50a:	80 93 b9 00 	sts	0x00B9, r24
     50e:	90 93 ba 00 	sts	0x00BA, r25
     512:	a0 93 bb 00 	sts	0x00BB, r26
     516:	eb e5       	ldi	r30, 0x5B	; 91
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	23 ed       	ldi	r18, 0xD3	; 211
     51c:	31 e0       	ldi	r19, 0x01	; 1
     51e:	d3 cf       	rjmp	.-90     	; 0x4c6 <_Z6mode_0v+0x22>

00000520 <_Z6mode_1v>:
	}
	
	_delay_ms(1);
	write_WS2812B_data(leds_next);
}
void mode_1(void){
     520:	8f 92       	push	r8
     522:	9f 92       	push	r9
     524:	af 92       	push	r10
     526:	bf 92       	push	r11
     528:	ef 92       	push	r14
     52a:	ff 92       	push	r15
     52c:	0f 93       	push	r16
     52e:	1f 93       	push	r17
     530:	cf 93       	push	r28
     532:	df 93       	push	r29
     534:	0b e5       	ldi	r16, 0x5B	; 91
     536:	11 e0       	ldi	r17, 0x01	; 1
     538:	c0 e0       	ldi	r28, 0x00	; 0
     53a:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t i = 0; i < MAXPIX; i++){
		tempColor = inceasingHue;
		tempColor.h = tempColor.h + (6.375 * i);
     53c:	0f 2e       	mov	r0, r31
     53e:	f9 eb       	ldi	r31, 0xB9	; 185
     540:	ef 2e       	mov	r14, r31
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	ff 2e       	mov	r15, r31
     546:	f0 2d       	mov	r31, r0
	_delay_ms(1);
	write_WS2812B_data(leds_next);
}
void mode_1(void){
	for (uint8_t i = 0; i < MAXPIX; i++){
		tempColor = inceasingHue;
     548:	60 91 bc 00 	lds	r22, 0x00BC
     54c:	90 91 bd 00 	lds	r25, 0x00BD
     550:	80 91 be 00 	lds	r24, 0x00BE
     554:	60 93 b9 00 	sts	0x00B9, r22
     558:	90 93 ba 00 	sts	0x00BA, r25
     55c:	80 93 bb 00 	sts	0x00BB, r24
		tempColor.h = tempColor.h + (6.375 * i);
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a5 d4       	rcall	.+2378   	; 0xeb2 <__floatsisf>
     568:	4b 01       	movw	r8, r22
     56a:	5c 01       	movw	r10, r24
     56c:	be 01       	movw	r22, r28
     56e:	0d 2e       	mov	r0, r29
     570:	00 0c       	add	r0, r0
     572:	88 0b       	sbc	r24, r24
     574:	99 0b       	sbc	r25, r25
     576:	9d d4       	rcall	.+2362   	; 0xeb2 <__floatsisf>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	4c ec       	ldi	r20, 0xCC	; 204
     57e:	50 e4       	ldi	r21, 0x40	; 64
     580:	77 d5       	rcall	.+2798   	; 0x1070 <__mulsf3>
     582:	9b 01       	movw	r18, r22
     584:	ac 01       	movw	r20, r24
     586:	c5 01       	movw	r24, r10
     588:	b4 01       	movw	r22, r8
     58a:	94 d3       	rcall	.+1832   	; 0xcb4 <__addsf3>
     58c:	64 d4       	rcall	.+2248   	; 0xe56 <__fixunssfsi>
     58e:	f7 01       	movw	r30, r14
     590:	60 83       	st	Z, r22
		leds_next[i] = tempColor;
     592:	80 91 b9 00 	lds	r24, 0x00B9
     596:	90 91 ba 00 	lds	r25, 0x00BA
     59a:	a0 91 bb 00 	lds	r26, 0x00BB
     59e:	f8 01       	movw	r30, r16
     5a0:	81 93       	st	Z+, r24
     5a2:	91 93       	st	Z+, r25
     5a4:	a1 93       	st	Z+, r26
     5a6:	8f 01       	movw	r16, r30
     5a8:	21 96       	adiw	r28, 0x01	; 1
	
	_delay_ms(1);
	write_WS2812B_data(leds_next);
}
void mode_1(void){
	for (uint8_t i = 0; i < MAXPIX; i++){
     5aa:	c8 32       	cpi	r28, 0x28	; 40
     5ac:	d1 05       	cpc	r29, r1
     5ae:	61 f6       	brne	.-104    	; 0x548 <_Z6mode_1v+0x28>
     5b0:	8f e9       	ldi	r24, 0x9F	; 159
     5b2:	9f e0       	ldi	r25, 0x0F	; 15
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	f1 f7       	brne	.-4      	; 0x5b4 <_Z6mode_1v+0x94>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <_Z6mode_1v+0x9a>
     5ba:	00 00       	nop
		tempColor.h = tempColor.h + (6.375 * i);
		leds_next[i] = tempColor;
	}
	
	_delay_ms(1);
	write_WS2812B_data(leds_next);
     5bc:	8b e5       	ldi	r24, 0x5B	; 91
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	1e de       	rcall	.-964    	; 0x1fe <_Z18write_WS2812B_dataP4cHSV>
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	bf 90       	pop	r11
     5d0:	af 90       	pop	r10
     5d2:	9f 90       	pop	r9
     5d4:	8f 90       	pop	r8
     5d6:	08 95       	ret

000005d8 <_Z6mode_2v>:
void mode_2(void){
     5d8:	cf 93       	push	r28
     5da:	df 93       	push	r29
     5dc:	a8 e7       	ldi	r26, 0x78	; 120
     5de:	b0 e0       	ldi	r27, 0x00	; 0
     5e0:	eb e5       	ldi	r30, 0x5B	; 91
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	63 ed       	ldi	r22, 0xD3	; 211
     5e6:	71 e0       	ldi	r23, 0x01	; 1
		{
			tempColor.h = tempColor.h + (hueChange * 8);
		}
		else if (zoneMap[i] == 9)
		{
			tempColor.h = tempColor.h + (hueChange * 9);
     5e8:	c9 eb       	ldi	r28, 0xB9	; 185
     5ea:	d0 e0       	ldi	r29, 0x00	; 0
	write_WS2812B_data(leds_next);
}
void mode_2(void){
	uint8_t hueChange = 16;
	for (uint8_t i = 0; i < MAXPIX; i++){
		tempColor = inceasingHue;
     5ec:	20 91 bc 00 	lds	r18, 0x00BC
     5f0:	30 91 bd 00 	lds	r19, 0x00BD
     5f4:	40 91 be 00 	lds	r20, 0x00BE
     5f8:	20 93 b9 00 	sts	0x00B9, r18
     5fc:	30 93 ba 00 	sts	0x00BA, r19
     600:	40 93 bb 00 	sts	0x00BB, r20
		if (zoneMap[i] == 0)
     604:	8d 91       	ld	r24, X+
     606:	88 23       	and	r24, r24
     608:	a9 f1       	breq	.+106    	; 0x674 <_Z6mode_2v+0x9c>
		{
			tempColor.h = tempColor.h + (hueChange * 0);
		}
		else if (zoneMap[i] == 1)
     60a:	81 30       	cpi	r24, 0x01	; 1
     60c:	21 f4       	brne	.+8      	; 0x616 <_Z6mode_2v+0x3e>
		{
			tempColor.h = tempColor.h + (hueChange * 1);
     60e:	88 81       	ld	r24, Y
     610:	80 5f       	subi	r24, 0xF0	; 240
     612:	88 83       	st	Y, r24
     614:	2f c0       	rjmp	.+94     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 2)
     616:	82 30       	cpi	r24, 0x02	; 2
     618:	21 f4       	brne	.+8      	; 0x622 <_Z6mode_2v+0x4a>
		{
			tempColor.h = tempColor.h + (hueChange * 2);
     61a:	88 81       	ld	r24, Y
     61c:	80 5e       	subi	r24, 0xE0	; 224
     61e:	88 83       	st	Y, r24
     620:	29 c0       	rjmp	.+82     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 3)
     622:	83 30       	cpi	r24, 0x03	; 3
     624:	21 f4       	brne	.+8      	; 0x62e <_Z6mode_2v+0x56>
		{
			tempColor.h = tempColor.h + (hueChange * 3);
     626:	88 81       	ld	r24, Y
     628:	80 5d       	subi	r24, 0xD0	; 208
     62a:	88 83       	st	Y, r24
     62c:	23 c0       	rjmp	.+70     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 4)
     62e:	84 30       	cpi	r24, 0x04	; 4
     630:	21 f4       	brne	.+8      	; 0x63a <_Z6mode_2v+0x62>
		{
			tempColor.h = tempColor.h + (hueChange * 4);
     632:	88 81       	ld	r24, Y
     634:	80 5c       	subi	r24, 0xC0	; 192
     636:	88 83       	st	Y, r24
     638:	1d c0       	rjmp	.+58     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 5)
     63a:	85 30       	cpi	r24, 0x05	; 5
     63c:	21 f4       	brne	.+8      	; 0x646 <_Z6mode_2v+0x6e>
		{
			tempColor.h = tempColor.h + (hueChange * 5);
     63e:	88 81       	ld	r24, Y
     640:	80 5b       	subi	r24, 0xB0	; 176
     642:	88 83       	st	Y, r24
     644:	17 c0       	rjmp	.+46     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 6)
     646:	86 30       	cpi	r24, 0x06	; 6
     648:	21 f4       	brne	.+8      	; 0x652 <_Z6mode_2v+0x7a>
		{
			tempColor.h = tempColor.h + (hueChange * 6);
     64a:	88 81       	ld	r24, Y
     64c:	80 5a       	subi	r24, 0xA0	; 160
     64e:	88 83       	st	Y, r24
     650:	11 c0       	rjmp	.+34     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 7)
     652:	87 30       	cpi	r24, 0x07	; 7
     654:	21 f4       	brne	.+8      	; 0x65e <_Z6mode_2v+0x86>
		{
			tempColor.h = tempColor.h + (hueChange * 7);
     656:	88 81       	ld	r24, Y
     658:	80 59       	subi	r24, 0x90	; 144
     65a:	88 83       	st	Y, r24
     65c:	0b c0       	rjmp	.+22     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 8)
     65e:	88 30       	cpi	r24, 0x08	; 8
     660:	21 f4       	brne	.+8      	; 0x66a <_Z6mode_2v+0x92>
		{
			tempColor.h = tempColor.h + (hueChange * 8);
     662:	88 81       	ld	r24, Y
     664:	80 58       	subi	r24, 0x80	; 128
     666:	88 83       	st	Y, r24
     668:	05 c0       	rjmp	.+10     	; 0x674 <_Z6mode_2v+0x9c>
		}
		else if (zoneMap[i] == 9)
     66a:	89 30       	cpi	r24, 0x09	; 9
     66c:	19 f4       	brne	.+6      	; 0x674 <_Z6mode_2v+0x9c>
		{
			tempColor.h = tempColor.h + (hueChange * 9);
     66e:	88 81       	ld	r24, Y
     670:	80 57       	subi	r24, 0x70	; 112
     672:	88 83       	st	Y, r24
		}
		leds_next[i] = tempColor;
     674:	20 91 b9 00 	lds	r18, 0x00B9
     678:	30 91 ba 00 	lds	r19, 0x00BA
     67c:	40 91 bb 00 	lds	r20, 0x00BB
     680:	21 93       	st	Z+, r18
     682:	31 93       	st	Z+, r19
     684:	41 93       	st	Z+, r20
	_delay_ms(1);
	write_WS2812B_data(leds_next);
}
void mode_2(void){
	uint8_t hueChange = 16;
	for (uint8_t i = 0; i < MAXPIX; i++){
     686:	e6 17       	cp	r30, r22
     688:	f7 07       	cpc	r31, r23
     68a:	09 f0       	breq	.+2      	; 0x68e <_Z6mode_2v+0xb6>
     68c:	af cf       	rjmp	.-162    	; 0x5ec <_Z6mode_2v+0x14>
     68e:	8f e9       	ldi	r24, 0x9F	; 159
     690:	9f e0       	ldi	r25, 0x0F	; 15
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <_Z6mode_2v+0xba>
     696:	00 c0       	rjmp	.+0      	; 0x698 <_Z6mode_2v+0xc0>
     698:	00 00       	nop
		leds_next[i] = tempColor;
	}
	
	
	_delay_ms(1);
	write_WS2812B_data(leds_next);
     69a:	8b e5       	ldi	r24, 0x5B	; 91
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	af dd       	rcall	.-1186   	; 0x1fe <_Z18write_WS2812B_dataP4cHSV>
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <_Z10mode_1and2v>:
void mode_1and2 (void){
	if (colorIndex%2 == 0)
     6a6:	80 91 ee 01 	lds	r24, 0x01EE
     6aa:	80 fd       	sbrc	r24, 0
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <_Z10mode_1and2v+0xc>
	{
		mode_1();
     6ae:	38 df       	rcall	.-400    	; 0x520 <_Z6mode_1v>
     6b0:	08 95       	ret
	}
	else
	{
		mode_2();
     6b2:	92 df       	rcall	.-220    	; 0x5d8 <_Z6mode_2v>
     6b4:	08 95       	ret

000006b6 <_Z6mode_3v>:
	}
}
void mode_3(void){
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
	if (inceasingHue.h % 15 == 0)
     6c0:	80 91 bc 00 	lds	r24, 0x00BC
     6c4:	6f e0       	ldi	r22, 0x0F	; 15
     6c6:	3f d5       	rcall	.+2686   	; 0x1146 <__udivmodqi4>
     6c8:	91 11       	cpse	r25, r1
     6ca:	12 c0       	rjmp	.+36     	; 0x6f0 <_Z6mode_3v+0x3a>
	{
		c++;
     6cc:	80 91 b1 00 	lds	r24, 0x00B1
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
		if(c>19){
     6d2:	84 31       	cpi	r24, 0x14	; 20
     6d4:	18 f4       	brcc	.+6      	; 0x6dc <_Z6mode_3v+0x26>
	}
}
void mode_3(void){
	if (inceasingHue.h % 15 == 0)
	{
		c++;
     6d6:	80 93 b1 00 	sts	0x00B1, r24
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <_Z6mode_3v+0x2a>
		if(c>19){
			c = 0;
     6dc:	10 92 b1 00 	sts	0x00B1, r1
		}
		d = bottom2top_ZonePattern[c];
     6e0:	e0 91 b1 00 	lds	r30, 0x00B1
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ec 59       	subi	r30, 0x9C	; 156
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	80 81       	ld	r24, Z
     6ec:	80 93 b0 00 	sts	0x00B0, r24
	}
	
	tempColor = colorList[colorIndex];
     6f0:	20 91 ee 01 	lds	r18, 0x01EE
	if (colorIndex == HUELISTLENGTH)
     6f4:	29 30       	cpi	r18, 0x09	; 9
     6f6:	99 f0       	breq	.+38     	; 0x71e <_Z6mode_3v+0x68>
			c = 0;
		}
		d = bottom2top_ZonePattern[c];
	}
	
	tempColor = colorList[colorIndex];
     6f8:	82 2f       	mov	r24, r18
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	82 0f       	add	r24, r18
     6fe:	91 1d       	adc	r25, r1
     700:	82 0f       	add	r24, r18
     702:	91 1d       	adc	r25, r1
     704:	fc 01       	movw	r30, r24
     706:	ed 52       	subi	r30, 0x2D	; 45
     708:	fe 4f       	sbci	r31, 0xFE	; 254
     70a:	80 81       	ld	r24, Z
     70c:	91 81       	ldd	r25, Z+1	; 0x01
     70e:	a2 81       	ldd	r26, Z+2	; 0x02
     710:	80 93 b9 00 	sts	0x00B9, r24
     714:	90 93 ba 00 	sts	0x00BA, r25
     718:	a0 93 bb 00 	sts	0x00BB, r26
     71c:	0c c0       	rjmp	.+24     	; 0x736 <_Z6mode_3v+0x80>
	if (colorIndex == HUELISTLENGTH)
	{
		tempColor = inceasingHue;
     71e:	80 91 bc 00 	lds	r24, 0x00BC
     722:	90 91 bd 00 	lds	r25, 0x00BD
     726:	a0 91 be 00 	lds	r26, 0x00BE
     72a:	80 93 b9 00 	sts	0x00B9, r24
     72e:	90 93 ba 00 	sts	0x00BA, r25
     732:	a0 93 bb 00 	sts	0x00BB, r26
	}
	
	
	zoneColor[1].v = 0;
     736:	e1 ec       	ldi	r30, 0xC1	; 193
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	15 82       	std	Z+5, r1	; 0x05
	zoneColor[2].v = 0;
     73c:	10 86       	std	Z+8, r1	; 0x08
	zoneColor[3].v = 0;
     73e:	13 86       	std	Z+11, r1	; 0x0b
	zoneColor[4].v = 0;
     740:	16 86       	std	Z+14, r1	; 0x0e
	zoneColor[5].v = 0;
     742:	11 8a       	std	Z+17, r1	; 0x11
	zoneColor[6].v = 0;
     744:	14 8a       	std	Z+20, r1	; 0x14
	zoneColor[7].v = 0;
     746:	17 8a       	std	Z+23, r1	; 0x17
	zoneColor[8].v = 0;
     748:	12 8e       	std	Z+26, r1	; 0x1a
	zoneColor[9].v = 0;
     74a:	15 8e       	std	Z+29, r1	; 0x1d
	
	if (d == 0)
     74c:	80 91 b0 00 	lds	r24, 0x00B0
     750:	81 11       	cpse	r24, r1
     752:	0d c0       	rjmp	.+26     	; 0x76e <_Z6mode_3v+0xb8>
	{
		zoneColor[0] = tempColor;
     754:	80 91 b9 00 	lds	r24, 0x00B9
     758:	90 91 ba 00 	lds	r25, 0x00BA
     75c:	a0 91 bb 00 	lds	r26, 0x00BB
     760:	80 93 c1 00 	sts	0x00C1, r24
     764:	90 93 c2 00 	sts	0x00C2, r25
     768:	a0 93 c3 00 	sts	0x00C3, r26
     76c:	6f c1       	rjmp	.+734    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 1)
     76e:	81 30       	cpi	r24, 0x01	; 1
     770:	79 f4       	brne	.+30     	; 0x790 <_Z6mode_3v+0xda>
	{
		zoneColor[0] = tempColor;
     772:	e1 ec       	ldi	r30, 0xC1	; 193
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 91 b9 00 	lds	r24, 0x00B9
     77a:	90 91 ba 00 	lds	r25, 0x00BA
     77e:	a0 91 bb 00 	lds	r26, 0x00BB
     782:	80 83       	st	Z, r24
     784:	91 83       	std	Z+1, r25	; 0x01
     786:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     788:	83 83       	std	Z+3, r24	; 0x03
     78a:	94 83       	std	Z+4, r25	; 0x04
     78c:	a5 83       	std	Z+5, r26	; 0x05
     78e:	5e c1       	rjmp	.+700    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 2)
     790:	82 30       	cpi	r24, 0x02	; 2
     792:	91 f4       	brne	.+36     	; 0x7b8 <_Z6mode_3v+0x102>
	{
		zoneColor[0] = tempColor;
     794:	e1 ec       	ldi	r30, 0xC1	; 193
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 91 b9 00 	lds	r24, 0x00B9
     79c:	90 91 ba 00 	lds	r25, 0x00BA
     7a0:	a0 91 bb 00 	lds	r26, 0x00BB
     7a4:	80 83       	st	Z, r24
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     7aa:	83 83       	std	Z+3, r24	; 0x03
     7ac:	94 83       	std	Z+4, r25	; 0x04
     7ae:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     7b0:	86 83       	std	Z+6, r24	; 0x06
     7b2:	97 83       	std	Z+7, r25	; 0x07
     7b4:	a0 87       	std	Z+8, r26	; 0x08
     7b6:	4a c1       	rjmp	.+660    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 3)
     7b8:	83 30       	cpi	r24, 0x03	; 3
     7ba:	a9 f4       	brne	.+42     	; 0x7e6 <_Z6mode_3v+0x130>
	{
		zoneColor[0] = tempColor;
     7bc:	e1 ec       	ldi	r30, 0xC1	; 193
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 91 b9 00 	lds	r24, 0x00B9
     7c4:	90 91 ba 00 	lds	r25, 0x00BA
     7c8:	a0 91 bb 00 	lds	r26, 0x00BB
     7cc:	80 83       	st	Z, r24
     7ce:	91 83       	std	Z+1, r25	; 0x01
     7d0:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     7d2:	83 83       	std	Z+3, r24	; 0x03
     7d4:	94 83       	std	Z+4, r25	; 0x04
     7d6:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     7d8:	86 83       	std	Z+6, r24	; 0x06
     7da:	97 83       	std	Z+7, r25	; 0x07
     7dc:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     7de:	81 87       	std	Z+9, r24	; 0x09
     7e0:	92 87       	std	Z+10, r25	; 0x0a
     7e2:	a3 87       	std	Z+11, r26	; 0x0b
     7e4:	33 c1       	rjmp	.+614    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 4)
     7e6:	84 30       	cpi	r24, 0x04	; 4
     7e8:	c1 f4       	brne	.+48     	; 0x81a <_Z6mode_3v+0x164>
	{
		zoneColor[0] = tempColor;
     7ea:	e1 ec       	ldi	r30, 0xC1	; 193
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 91 b9 00 	lds	r24, 0x00B9
     7f2:	90 91 ba 00 	lds	r25, 0x00BA
     7f6:	a0 91 bb 00 	lds	r26, 0x00BB
     7fa:	80 83       	st	Z, r24
     7fc:	91 83       	std	Z+1, r25	; 0x01
     7fe:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     800:	83 83       	std	Z+3, r24	; 0x03
     802:	94 83       	std	Z+4, r25	; 0x04
     804:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     806:	86 83       	std	Z+6, r24	; 0x06
     808:	97 83       	std	Z+7, r25	; 0x07
     80a:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     80c:	81 87       	std	Z+9, r24	; 0x09
     80e:	92 87       	std	Z+10, r25	; 0x0a
     810:	a3 87       	std	Z+11, r26	; 0x0b
		zoneColor[4] = tempColor;
     812:	84 87       	std	Z+12, r24	; 0x0c
     814:	95 87       	std	Z+13, r25	; 0x0d
     816:	a6 87       	std	Z+14, r26	; 0x0e
     818:	19 c1       	rjmp	.+562    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 5)
     81a:	85 30       	cpi	r24, 0x05	; 5
     81c:	d9 f4       	brne	.+54     	; 0x854 <_Z6mode_3v+0x19e>
	{
		zoneColor[0] = tempColor;
     81e:	e1 ec       	ldi	r30, 0xC1	; 193
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 91 b9 00 	lds	r24, 0x00B9
     826:	90 91 ba 00 	lds	r25, 0x00BA
     82a:	a0 91 bb 00 	lds	r26, 0x00BB
     82e:	80 83       	st	Z, r24
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     834:	83 83       	std	Z+3, r24	; 0x03
     836:	94 83       	std	Z+4, r25	; 0x04
     838:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     83a:	86 83       	std	Z+6, r24	; 0x06
     83c:	97 83       	std	Z+7, r25	; 0x07
     83e:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     840:	81 87       	std	Z+9, r24	; 0x09
     842:	92 87       	std	Z+10, r25	; 0x0a
     844:	a3 87       	std	Z+11, r26	; 0x0b
		zoneColor[4] = tempColor;
     846:	84 87       	std	Z+12, r24	; 0x0c
     848:	95 87       	std	Z+13, r25	; 0x0d
     84a:	a6 87       	std	Z+14, r26	; 0x0e
		zoneColor[5] = tempColor;
     84c:	87 87       	std	Z+15, r24	; 0x0f
     84e:	90 8b       	std	Z+16, r25	; 0x10
     850:	a1 8b       	std	Z+17, r26	; 0x11
     852:	fc c0       	rjmp	.+504    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 6)
     854:	86 30       	cpi	r24, 0x06	; 6
     856:	f1 f4       	brne	.+60     	; 0x894 <_Z6mode_3v+0x1de>
	{
		zoneColor[0] = tempColor;
     858:	e1 ec       	ldi	r30, 0xC1	; 193
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	80 91 b9 00 	lds	r24, 0x00B9
     860:	90 91 ba 00 	lds	r25, 0x00BA
     864:	a0 91 bb 00 	lds	r26, 0x00BB
     868:	80 83       	st	Z, r24
     86a:	91 83       	std	Z+1, r25	; 0x01
     86c:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     86e:	83 83       	std	Z+3, r24	; 0x03
     870:	94 83       	std	Z+4, r25	; 0x04
     872:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     874:	86 83       	std	Z+6, r24	; 0x06
     876:	97 83       	std	Z+7, r25	; 0x07
     878:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     87a:	81 87       	std	Z+9, r24	; 0x09
     87c:	92 87       	std	Z+10, r25	; 0x0a
     87e:	a3 87       	std	Z+11, r26	; 0x0b
		zoneColor[4] = tempColor;
     880:	84 87       	std	Z+12, r24	; 0x0c
     882:	95 87       	std	Z+13, r25	; 0x0d
     884:	a6 87       	std	Z+14, r26	; 0x0e
		zoneColor[5] = tempColor;
     886:	87 87       	std	Z+15, r24	; 0x0f
     888:	90 8b       	std	Z+16, r25	; 0x10
     88a:	a1 8b       	std	Z+17, r26	; 0x11
		zoneColor[6] = tempColor;
     88c:	82 8b       	std	Z+18, r24	; 0x12
     88e:	93 8b       	std	Z+19, r25	; 0x13
     890:	a4 8b       	std	Z+20, r26	; 0x14
     892:	dc c0       	rjmp	.+440    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 7)
     894:	87 30       	cpi	r24, 0x07	; 7
     896:	09 f5       	brne	.+66     	; 0x8da <_Z6mode_3v+0x224>
	{
		zoneColor[0] = tempColor;
     898:	e1 ec       	ldi	r30, 0xC1	; 193
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 91 b9 00 	lds	r24, 0x00B9
     8a0:	90 91 ba 00 	lds	r25, 0x00BA
     8a4:	a0 91 bb 00 	lds	r26, 0x00BB
     8a8:	80 83       	st	Z, r24
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     8ae:	83 83       	std	Z+3, r24	; 0x03
     8b0:	94 83       	std	Z+4, r25	; 0x04
     8b2:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     8b4:	86 83       	std	Z+6, r24	; 0x06
     8b6:	97 83       	std	Z+7, r25	; 0x07
     8b8:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     8ba:	81 87       	std	Z+9, r24	; 0x09
     8bc:	92 87       	std	Z+10, r25	; 0x0a
     8be:	a3 87       	std	Z+11, r26	; 0x0b
		zoneColor[4] = tempColor;
     8c0:	84 87       	std	Z+12, r24	; 0x0c
     8c2:	95 87       	std	Z+13, r25	; 0x0d
     8c4:	a6 87       	std	Z+14, r26	; 0x0e
		zoneColor[5] = tempColor;
     8c6:	87 87       	std	Z+15, r24	; 0x0f
     8c8:	90 8b       	std	Z+16, r25	; 0x10
     8ca:	a1 8b       	std	Z+17, r26	; 0x11
		zoneColor[6] = tempColor;
     8cc:	82 8b       	std	Z+18, r24	; 0x12
     8ce:	93 8b       	std	Z+19, r25	; 0x13
     8d0:	a4 8b       	std	Z+20, r26	; 0x14
		zoneColor[7] = tempColor;
     8d2:	85 8b       	std	Z+21, r24	; 0x15
     8d4:	96 8b       	std	Z+22, r25	; 0x16
     8d6:	a7 8b       	std	Z+23, r26	; 0x17
     8d8:	b9 c0       	rjmp	.+370    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 8)
     8da:	88 30       	cpi	r24, 0x08	; 8
     8dc:	21 f5       	brne	.+72     	; 0x926 <_Z6mode_3v+0x270>
	{
		zoneColor[0] = tempColor;
     8de:	e1 ec       	ldi	r30, 0xC1	; 193
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	80 91 b9 00 	lds	r24, 0x00B9
     8e6:	90 91 ba 00 	lds	r25, 0x00BA
     8ea:	a0 91 bb 00 	lds	r26, 0x00BB
     8ee:	80 83       	st	Z, r24
     8f0:	91 83       	std	Z+1, r25	; 0x01
     8f2:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     8f4:	83 83       	std	Z+3, r24	; 0x03
     8f6:	94 83       	std	Z+4, r25	; 0x04
     8f8:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     8fa:	86 83       	std	Z+6, r24	; 0x06
     8fc:	97 83       	std	Z+7, r25	; 0x07
     8fe:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     900:	81 87       	std	Z+9, r24	; 0x09
     902:	92 87       	std	Z+10, r25	; 0x0a
     904:	a3 87       	std	Z+11, r26	; 0x0b
		zoneColor[4] = tempColor;
     906:	84 87       	std	Z+12, r24	; 0x0c
     908:	95 87       	std	Z+13, r25	; 0x0d
     90a:	a6 87       	std	Z+14, r26	; 0x0e
		zoneColor[5] = tempColor;
     90c:	87 87       	std	Z+15, r24	; 0x0f
     90e:	90 8b       	std	Z+16, r25	; 0x10
     910:	a1 8b       	std	Z+17, r26	; 0x11
		zoneColor[6] = tempColor;
     912:	82 8b       	std	Z+18, r24	; 0x12
     914:	93 8b       	std	Z+19, r25	; 0x13
     916:	a4 8b       	std	Z+20, r26	; 0x14
		zoneColor[7] = tempColor;
     918:	85 8b       	std	Z+21, r24	; 0x15
     91a:	96 8b       	std	Z+22, r25	; 0x16
     91c:	a7 8b       	std	Z+23, r26	; 0x17
		zoneColor[8] = tempColor;
     91e:	80 8f       	std	Z+24, r24	; 0x18
     920:	91 8f       	std	Z+25, r25	; 0x19
     922:	a2 8f       	std	Z+26, r26	; 0x1a
     924:	93 c0       	rjmp	.+294    	; 0xa4c <_Z6mode_3v+0x396>
	}
	else if (d == 9)
     926:	89 30       	cpi	r24, 0x09	; 9
     928:	09 f0       	breq	.+2      	; 0x92c <_Z6mode_3v+0x276>
     92a:	90 c0       	rjmp	.+288    	; 0xa4c <_Z6mode_3v+0x396>
	{
		zoneColor[0] = tempColor;
     92c:	e1 ec       	ldi	r30, 0xC1	; 193
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 91 b9 00 	lds	r24, 0x00B9
     934:	90 91 ba 00 	lds	r25, 0x00BA
     938:	a0 91 bb 00 	lds	r26, 0x00BB
     93c:	80 83       	st	Z, r24
     93e:	91 83       	std	Z+1, r25	; 0x01
     940:	a2 83       	std	Z+2, r26	; 0x02
		zoneColor[1] = tempColor;
     942:	83 83       	std	Z+3, r24	; 0x03
     944:	94 83       	std	Z+4, r25	; 0x04
     946:	a5 83       	std	Z+5, r26	; 0x05
		zoneColor[2] = tempColor;
     948:	86 83       	std	Z+6, r24	; 0x06
     94a:	97 83       	std	Z+7, r25	; 0x07
     94c:	a0 87       	std	Z+8, r26	; 0x08
		zoneColor[3] = tempColor;
     94e:	81 87       	std	Z+9, r24	; 0x09
     950:	92 87       	std	Z+10, r25	; 0x0a
     952:	a3 87       	std	Z+11, r26	; 0x0b
		zoneColor[4] = tempColor;
     954:	84 87       	std	Z+12, r24	; 0x0c
     956:	95 87       	std	Z+13, r25	; 0x0d
     958:	a6 87       	std	Z+14, r26	; 0x0e
		zoneColor[5] = tempColor;
     95a:	87 87       	std	Z+15, r24	; 0x0f
     95c:	90 8b       	std	Z+16, r25	; 0x10
     95e:	a1 8b       	std	Z+17, r26	; 0x11
		zoneColor[6] = tempColor;
     960:	82 8b       	std	Z+18, r24	; 0x12
     962:	93 8b       	std	Z+19, r25	; 0x13
     964:	a4 8b       	std	Z+20, r26	; 0x14
		zoneColor[7] = tempColor;
     966:	85 8b       	std	Z+21, r24	; 0x15
     968:	96 8b       	std	Z+22, r25	; 0x16
     96a:	a7 8b       	std	Z+23, r26	; 0x17
		zoneColor[8] = tempColor;
     96c:	80 8f       	std	Z+24, r24	; 0x18
     96e:	91 8f       	std	Z+25, r25	; 0x19
     970:	a2 8f       	std	Z+26, r26	; 0x1a
		zoneColor[9] = tempColor;
     972:	83 8f       	std	Z+27, r24	; 0x1b
     974:	94 8f       	std	Z+28, r25	; 0x1c
     976:	a5 8f       	std	Z+29, r26	; 0x1d
     978:	69 c0       	rjmp	.+210    	; 0xa4c <_Z6mode_3v+0x396>
	}
	
	
	for (uint8_t i = 0; i < MAXPIX; i++){
		if (zoneMap[i] == 0)
     97a:	8d 91       	ld	r24, X+
     97c:	81 11       	cpse	r24, r1
     97e:	07 c0       	rjmp	.+14     	; 0x98e <_Z6mode_3v+0x2d8>
		{
			leds_next[i] = zoneColor[0];
     980:	c8 80       	ld	r12, Y
     982:	d9 80       	ldd	r13, Y+1	; 0x01
     984:	ea 80       	ldd	r14, Y+2	; 0x02
     986:	c0 82       	st	Z, r12
     988:	d1 82       	std	Z+1, r13	; 0x01
     98a:	e2 82       	std	Z+2, r14	; 0x02
     98c:	50 c0       	rjmp	.+160    	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 1)
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	39 f4       	brne	.+14     	; 0x9a0 <_Z6mode_3v+0x2ea>
		{
			leds_next[i] = zoneColor[1];
     992:	cb 80       	ldd	r12, Y+3	; 0x03
     994:	dc 80       	ldd	r13, Y+4	; 0x04
     996:	ed 80       	ldd	r14, Y+5	; 0x05
     998:	c0 82       	st	Z, r12
     99a:	d1 82       	std	Z+1, r13	; 0x01
     99c:	e2 82       	std	Z+2, r14	; 0x02
     99e:	47 c0       	rjmp	.+142    	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 2)
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	39 f4       	brne	.+14     	; 0x9b2 <_Z6mode_3v+0x2fc>
		{
			leds_next[i] = zoneColor[2];
     9a4:	ce 80       	ldd	r12, Y+6	; 0x06
     9a6:	df 80       	ldd	r13, Y+7	; 0x07
     9a8:	e8 84       	ldd	r14, Y+8	; 0x08
     9aa:	c0 82       	st	Z, r12
     9ac:	d1 82       	std	Z+1, r13	; 0x01
     9ae:	e2 82       	std	Z+2, r14	; 0x02
     9b0:	3e c0       	rjmp	.+124    	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 3)
     9b2:	83 30       	cpi	r24, 0x03	; 3
     9b4:	39 f4       	brne	.+14     	; 0x9c4 <_Z6mode_3v+0x30e>
		{
			leds_next[i] = zoneColor[3];
     9b6:	c9 84       	ldd	r12, Y+9	; 0x09
     9b8:	da 84       	ldd	r13, Y+10	; 0x0a
     9ba:	eb 84       	ldd	r14, Y+11	; 0x0b
     9bc:	c0 82       	st	Z, r12
     9be:	d1 82       	std	Z+1, r13	; 0x01
     9c0:	e2 82       	std	Z+2, r14	; 0x02
     9c2:	35 c0       	rjmp	.+106    	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 4)
     9c4:	84 30       	cpi	r24, 0x04	; 4
     9c6:	39 f4       	brne	.+14     	; 0x9d6 <_Z6mode_3v+0x320>
		{
			leds_next[i] = zoneColor[4];
     9c8:	cc 84       	ldd	r12, Y+12	; 0x0c
     9ca:	dd 84       	ldd	r13, Y+13	; 0x0d
     9cc:	ee 84       	ldd	r14, Y+14	; 0x0e
     9ce:	c0 82       	st	Z, r12
     9d0:	d1 82       	std	Z+1, r13	; 0x01
     9d2:	e2 82       	std	Z+2, r14	; 0x02
     9d4:	2c c0       	rjmp	.+88     	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 5)
     9d6:	85 30       	cpi	r24, 0x05	; 5
     9d8:	39 f4       	brne	.+14     	; 0x9e8 <_Z6mode_3v+0x332>
		{
			leds_next[i] = zoneColor[5];
     9da:	cf 84       	ldd	r12, Y+15	; 0x0f
     9dc:	d8 88       	ldd	r13, Y+16	; 0x10
     9de:	e9 88       	ldd	r14, Y+17	; 0x11
     9e0:	c0 82       	st	Z, r12
     9e2:	d1 82       	std	Z+1, r13	; 0x01
     9e4:	e2 82       	std	Z+2, r14	; 0x02
     9e6:	23 c0       	rjmp	.+70     	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 6)
     9e8:	86 30       	cpi	r24, 0x06	; 6
     9ea:	39 f4       	brne	.+14     	; 0x9fa <_Z6mode_3v+0x344>
		{
			leds_next[i] = zoneColor[6];
     9ec:	ca 88       	ldd	r12, Y+18	; 0x12
     9ee:	db 88       	ldd	r13, Y+19	; 0x13
     9f0:	ec 88       	ldd	r14, Y+20	; 0x14
     9f2:	c0 82       	st	Z, r12
     9f4:	d1 82       	std	Z+1, r13	; 0x01
     9f6:	e2 82       	std	Z+2, r14	; 0x02
     9f8:	1a c0       	rjmp	.+52     	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 7)
     9fa:	87 30       	cpi	r24, 0x07	; 7
     9fc:	39 f4       	brne	.+14     	; 0xa0c <_Z6mode_3v+0x356>
		{
			leds_next[i] = zoneColor[7];
     9fe:	cd 88       	ldd	r12, Y+21	; 0x15
     a00:	de 88       	ldd	r13, Y+22	; 0x16
     a02:	ef 88       	ldd	r14, Y+23	; 0x17
     a04:	c0 82       	st	Z, r12
     a06:	d1 82       	std	Z+1, r13	; 0x01
     a08:	e2 82       	std	Z+2, r14	; 0x02
     a0a:	11 c0       	rjmp	.+34     	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 8)
     a0c:	88 30       	cpi	r24, 0x08	; 8
     a0e:	39 f4       	brne	.+14     	; 0xa1e <_Z6mode_3v+0x368>
		{
			leds_next[i] = zoneColor[8];
     a10:	c8 8c       	ldd	r12, Y+24	; 0x18
     a12:	d9 8c       	ldd	r13, Y+25	; 0x19
     a14:	ea 8c       	ldd	r14, Y+26	; 0x1a
     a16:	c0 82       	st	Z, r12
     a18:	d1 82       	std	Z+1, r13	; 0x01
     a1a:	e2 82       	std	Z+2, r14	; 0x02
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <_Z6mode_3v+0x378>
		}
		else if (zoneMap[i] == 9)
     a1e:	89 30       	cpi	r24, 0x09	; 9
     a20:	31 f4       	brne	.+12     	; 0xa2e <_Z6mode_3v+0x378>
		{
			leds_next[i] = zoneColor[9];
     a22:	cb 8c       	ldd	r12, Y+27	; 0x1b
     a24:	dc 8c       	ldd	r13, Y+28	; 0x1c
     a26:	ed 8c       	ldd	r14, Y+29	; 0x1d
     a28:	c0 82       	st	Z, r12
     a2a:	d1 82       	std	Z+1, r13	; 0x01
     a2c:	e2 82       	std	Z+2, r14	; 0x02
     a2e:	33 96       	adiw	r30, 0x03	; 3
		zoneColor[8] = tempColor;
		zoneColor[9] = tempColor;
	}
	
	
	for (uint8_t i = 0; i < MAXPIX; i++){
     a30:	e2 17       	cp	r30, r18
     a32:	f3 07       	cpc	r31, r19
     a34:	09 f0       	breq	.+2      	; 0xa38 <_Z6mode_3v+0x382>
     a36:	a1 cf       	rjmp	.-190    	; 0x97a <_Z6mode_3v+0x2c4>
     a38:	8f e9       	ldi	r24, 0x9F	; 159
     a3a:	9f e0       	ldi	r25, 0x0F	; 15
     a3c:	01 97       	sbiw	r24, 0x01	; 1
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <_Z6mode_3v+0x386>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <_Z6mode_3v+0x38c>
     a42:	00 00       	nop
			leds_next[i] = zoneColor[9];
		}
	}
	//asm("nop");
	_delay_ms(1);
	write_WS2812B_data(leds_next);
     a44:	8b e5       	ldi	r24, 0x5B	; 91
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	da db       	rcall	.-2124   	; 0x1fe <_Z18write_WS2812B_dataP4cHSV>
     a4a:	09 c0       	rjmp	.+18     	; 0xa5e <_Z6mode_3v+0x3a8>
     a4c:	a8 e7       	ldi	r26, 0x78	; 120
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	eb e5       	ldi	r30, 0x5B	; 91
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	23 ed       	ldi	r18, 0xD3	; 211
     a56:	31 e0       	ldi	r19, 0x01	; 1
		{
			leds_next[i] = zoneColor[8];
		}
		else if (zoneMap[i] == 9)
		{
			leds_next[i] = zoneColor[9];
     a58:	c1 ec       	ldi	r28, 0xC1	; 193
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	8e cf       	rjmp	.-228    	; 0x97a <_Z6mode_3v+0x2c4>
		}
	}
	//asm("nop");
	_delay_ms(1);
	write_WS2812B_data(leds_next);
}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	ef 90       	pop	r14
     a64:	df 90       	pop	r13
     a66:	cf 90       	pop	r12
     a68:	08 95       	ret

00000a6a <_Z6mode_4v>:

//Sinelon
void mode_4(){

	if (inceasingHue.h % 5 == 0)
     a6a:	80 91 bc 00 	lds	r24, 0x00BC
     a6e:	65 e0       	ldi	r22, 0x05	; 5
     a70:	6a d3       	rcall	.+1748   	; 0x1146 <__udivmodqi4>
     a72:	91 11       	cpse	r25, r1
     a74:	0a c0       	rjmp	.+20     	; 0xa8a <_Z6mode_4v+0x20>
	{
		m++;
     a76:	80 91 b2 00 	lds	r24, 0x00B2
     a7a:	8f 5f       	subi	r24, 0xFF	; 255
		if (m> MAXPIX)
     a7c:	89 32       	cpi	r24, 0x29	; 41
     a7e:	18 f4       	brcc	.+6      	; 0xa86 <_Z6mode_4v+0x1c>
//Sinelon
void mode_4(){

	if (inceasingHue.h % 5 == 0)
	{
		m++;
     a80:	80 93 b2 00 	sts	0x00B2, r24
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <_Z6mode_4v+0x20>
		if (m> MAXPIX)
		{
			m = 0;
     a86:	10 92 b2 00 	sts	0x00B2, r1
		}
	}
	
	tempColor = colorList[colorIndex];
     a8a:	20 91 ee 01 	lds	r18, 0x01EE
	if (colorIndex == HUELISTLENGTH)
     a8e:	29 30       	cpi	r18, 0x09	; 9
     a90:	99 f0       	breq	.+38     	; 0xab8 <_Z6mode_4v+0x4e>
		{
			m = 0;
		}
	}
	
	tempColor = colorList[colorIndex];
     a92:	82 2f       	mov	r24, r18
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	82 0f       	add	r24, r18
     a98:	91 1d       	adc	r25, r1
     a9a:	82 0f       	add	r24, r18
     a9c:	91 1d       	adc	r25, r1
     a9e:	fc 01       	movw	r30, r24
     aa0:	ed 52       	subi	r30, 0x2D	; 45
     aa2:	fe 4f       	sbci	r31, 0xFE	; 254
     aa4:	80 81       	ld	r24, Z
     aa6:	91 81       	ldd	r25, Z+1	; 0x01
     aa8:	a2 81       	ldd	r26, Z+2	; 0x02
     aaa:	80 93 b9 00 	sts	0x00B9, r24
     aae:	90 93 ba 00 	sts	0x00BA, r25
     ab2:	a0 93 bb 00 	sts	0x00BB, r26
     ab6:	0c c0       	rjmp	.+24     	; 0xad0 <_Z6mode_4v+0x66>
	if (colorIndex == HUELISTLENGTH)
	{
		tempColor = inceasingHue;
     ab8:	80 91 bc 00 	lds	r24, 0x00BC
     abc:	90 91 bd 00 	lds	r25, 0x00BD
     ac0:	a0 91 be 00 	lds	r26, 0x00BE
     ac4:	80 93 b9 00 	sts	0x00B9, r24
     ac8:	90 93 ba 00 	sts	0x00BA, r25
     acc:	a0 93 bb 00 	sts	0x00BB, r26
	}
	
	fade2Black(2);
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	d1 dc       	rcall	.-1630   	; 0x476 <_Z10fade2Blackh>
	leds_next[m] = tempColor;
     ad4:	20 91 b2 00 	lds	r18, 0x00B2
     ad8:	82 2f       	mov	r24, r18
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	82 0f       	add	r24, r18
     ade:	91 1d       	adc	r25, r1
     ae0:	82 0f       	add	r24, r18
     ae2:	91 1d       	adc	r25, r1
     ae4:	fc 01       	movw	r30, r24
     ae6:	e5 5a       	subi	r30, 0xA5	; 165
     ae8:	fe 4f       	sbci	r31, 0xFE	; 254
     aea:	20 91 b9 00 	lds	r18, 0x00B9
     aee:	30 91 ba 00 	lds	r19, 0x00BA
     af2:	40 91 bb 00 	lds	r20, 0x00BB
     af6:	20 83       	st	Z, r18
     af8:	31 83       	std	Z+1, r19	; 0x01
     afa:	42 83       	std	Z+2, r20	; 0x02
	write_WS2812B_data(leds_next);
     afc:	8b e5       	ldi	r24, 0x5B	; 91
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	7e db       	rcall	.-2308   	; 0x1fe <_Z18write_WS2812B_dataP4cHSV>
     b02:	08 95       	ret

00000b04 <_Z6mode_5v>:
}

//Confetti Pattern
void mode_5(void){
     b04:	cf 93       	push	r28
	randPosition = ((uint8_t)rand())/6.4;
     b06:	6c d3       	rcall	.+1752   	; 0x11e0 <rand>
     b08:	bc 01       	movw	r22, r24
     b0a:	77 27       	eor	r23, r23
     b0c:	07 2e       	mov	r0, r23
     b0e:	00 0c       	add	r0, r0
     b10:	88 0b       	sbc	r24, r24
     b12:	99 0b       	sbc	r25, r25
     b14:	ce d1       	rcall	.+924    	; 0xeb2 <__floatsisf>
     b16:	2d ec       	ldi	r18, 0xCD	; 205
     b18:	3c ec       	ldi	r19, 0xCC	; 204
     b1a:	4c ec       	ldi	r20, 0xCC	; 204
     b1c:	50 e4       	ldi	r21, 0x40	; 64
     b1e:	2e d1       	rcall	.+604    	; 0xd7c <__divsf3>
     b20:	9a d1       	rcall	.+820    	; 0xe56 <__fixunssfsi>
     b22:	60 93 bf 00 	sts	0x00BF, r22
	randHue = ((uint8_t)rand())>>3; //This makes the Hue random around a central color.
     b26:	5c d3       	rcall	.+1720   	; 0x11e0 <rand>
     b28:	99 27       	eor	r25, r25
     b2a:	95 95       	asr	r25
     b2c:	87 95       	ror	r24
     b2e:	95 95       	asr	r25
     b30:	87 95       	ror	r24
     b32:	95 95       	asr	r25
     b34:	87 95       	ror	r24
     b36:	80 93 c0 00 	sts	0x00C0, r24
	uint8_t randSaturation = rand(); //This makes the whiteness/coloredness random	
     b3a:	52 d3       	rcall	.+1700   	; 0x11e0 <rand>
     b3c:	c8 2f       	mov	r28, r24
	
	m++;
     b3e:	90 91 b2 00 	lds	r25, 0x00B2
     b42:	9f 5f       	subi	r25, 0xFF	; 255
	if (m >= 5)
     b44:	95 30       	cpi	r25, 0x05	; 5
     b46:	18 f4       	brcc	.+6      	; 0xb4e <_Z6mode_5v+0x4a>
void mode_5(void){
	randPosition = ((uint8_t)rand())/6.4;
	randHue = ((uint8_t)rand())>>3; //This makes the Hue random around a central color.
	uint8_t randSaturation = rand(); //This makes the whiteness/coloredness random	
	
	m++;
     b48:	90 93 b2 00 	sts	0x00B2, r25
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <_Z6mode_5v+0x4e>
	if (m >= 5)
	{
		m = 0;
     b4e:	10 92 b2 00 	sts	0x00B2, r1
	}
	fade2Black(2); //Decrement all pixels
     b52:	82 e0       	ldi	r24, 0x02	; 2
     b54:	90 dc       	rcall	.-1760   	; 0x476 <_Z10fade2Blackh>
     b56:	8f e9       	ldi	r24, 0x9F	; 159
     b58:	9f e0       	ldi	r25, 0x0F	; 15
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	f1 f7       	brne	.-4      	; 0xb5a <_Z6mode_5v+0x56>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <_Z6mode_5v+0x5c>
     b60:	00 00       	nop
	_delay_ms(1);
	if (m == 0)
     b62:	80 91 b2 00 	lds	r24, 0x00B2
     b66:	81 11       	cpse	r24, r1
     b68:	36 c0       	rjmp	.+108    	; 0xbd6 <_Z6mode_5v+0xd2>
	{
		leds_next[randPosition].h = colorHueList[colorIndex] + randHue - 16;
     b6a:	20 91 bf 00 	lds	r18, 0x00BF
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	80 91 ee 01 	lds	r24, 0x01EE
     b74:	40 91 c0 00 	lds	r20, 0x00C0
     b78:	f9 01       	movw	r30, r18
     b7a:	ee 0f       	add	r30, r30
     b7c:	ff 1f       	adc	r31, r31
     b7e:	e2 0f       	add	r30, r18
     b80:	f3 1f       	adc	r31, r19
     b82:	e5 5a       	subi	r30, 0xA5	; 165
     b84:	fe 4f       	sbci	r31, 0xFE	; 254
     b86:	50 ef       	ldi	r21, 0xF0	; 240
     b88:	54 0f       	add	r21, r20
     b8a:	a8 2f       	mov	r26, r24
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	a9 55       	subi	r26, 0x59	; 89
     b90:	bf 4f       	sbci	r27, 0xFF	; 255
     b92:	9c 91       	ld	r25, X
     b94:	95 0f       	add	r25, r21
     b96:	90 83       	st	Z, r25
		leds_next[randPosition].s = randSaturation;
     b98:	c1 83       	std	Z+1, r28	; 0x01
		leds_next[randPosition].v = 255;
     b9a:	9f ef       	ldi	r25, 0xFF	; 255
     b9c:	92 83       	std	Z+2, r25	; 0x02
		
		if (colorIndex == HUELISTLENGTH-1)
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	51 f4       	brne	.+20     	; 0xbb6 <_Z6mode_5v+0xb2>
		{
			leds_next[randPosition].s = 0;
     ba2:	f9 01       	movw	r30, r18
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	2e 0f       	add	r18, r30
     baa:	3f 1f       	adc	r19, r31
     bac:	f9 01       	movw	r30, r18
     bae:	e5 5a       	subi	r30, 0xA5	; 165
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	11 82       	std	Z+1, r1	; 0x01
     bb4:	10 c0       	rjmp	.+32     	; 0xbd6 <_Z6mode_5v+0xd2>
		}
		
		if (colorIndex == HUELISTLENGTH)
     bb6:	89 30       	cpi	r24, 0x09	; 9
     bb8:	71 f4       	brne	.+28     	; 0xbd6 <_Z6mode_5v+0xd2>
		{
			leds_next[randPosition].h = inceasingHue.h + randHue - 16;
     bba:	f9 01       	movw	r30, r18
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	2e 0f       	add	r18, r30
     bc2:	3f 1f       	adc	r19, r31
     bc4:	f9 01       	movw	r30, r18
     bc6:	e5 5a       	subi	r30, 0xA5	; 165
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 91 bc 00 	lds	r24, 0x00BC
     bce:	48 0f       	add	r20, r24
     bd0:	40 51       	subi	r20, 0x10	; 16
     bd2:	40 83       	st	Z, r20
			leds_next[randPosition].s = randSaturation;
     bd4:	c1 83       	std	Z+1, r28	; 0x01
	}
	//for (uint8_t i = 0; i < MAXPIX; i++)
	//{
		//last_leds[i] = leds_next[i];
	//}
	write_WS2812B_data(leds_next);
     bd6:	8b e5       	ldi	r24, 0x5B	; 91
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	11 db       	rcall	.-2526   	; 0x1fe <_Z18write_WS2812B_dataP4cHSV>
}
     bdc:	cf 91       	pop	r28
     bde:	08 95       	ret

00000be0 <main>:
#################### Main ##################
*/
int main(void)
{
	
	GIMSK |= (1<<PCIE);
     be0:	8b b7       	in	r24, 0x3b	; 59
     be2:	80 62       	ori	r24, 0x20	; 32
     be4:	8b bf       	out	0x3b, r24	; 59
	PCMSK |= (1<<PB2);
     be6:	aa 9a       	sbi	0x15, 2	; 21
	sei();
     be8:	78 94       	sei
	PORTB ^= (1<<PB2); //Btn 
     bea:	98 b3       	in	r25, 0x18	; 24
     bec:	84 e0       	ldi	r24, 0x04	; 4
     bee:	89 27       	eor	r24, r25
     bf0:	88 bb       	out	0x18, r24	; 24
	
	brightnessIndex = EEPROM_read(0x04);
     bf2:	84 e0       	ldi	r24, 0x04	; 4
     bf4:	67 db       	rcall	.-2354   	; 0x2c4 <_Z11EEPROM_readh>
     bf6:	80 93 e2 00 	sts	0x00E2, r24
	if(brightnessIndex > 0x05){ //catch any errors in EEPROM
     bfa:	86 30       	cpi	r24, 0x06	; 6
     bfc:	10 f0       	brcs	.+4      	; 0xc02 <main+0x22>
		brightnessIndex = 0x00;
     bfe:	10 92 e2 00 	sts	0x00E2, r1
	}
	
	mode = EEPROM_read(0x06); // Read mode selection from last power cycle
     c02:	86 e0       	ldi	r24, 0x06	; 6
     c04:	5f db       	rcall	.-2370   	; 0x2c4 <_Z11EEPROM_readh>
     c06:	80 93 e0 00 	sts	0x00E0, r24
	if(mode > 0x08){ //catch any errors in EEPROM
     c0a:	89 30       	cpi	r24, 0x09	; 9
     c0c:	10 f0       	brcs	.+4      	; 0xc12 <main+0x32>
		mode = 0x00;
     c0e:	10 92 e0 00 	sts	0x00E0, r1
	}
	colorIndex = EEPROM_read(0x05); // Read color index selection from last power cycle
     c12:	85 e0       	ldi	r24, 0x05	; 5
     c14:	57 db       	rcall	.-2386   	; 0x2c4 <_Z11EEPROM_readh>
     c16:	80 93 ee 01 	sts	0x01EE, r24
	if(colorIndex > 0x0A){ //catch any errors in EEPROM
     c1a:	8b 30       	cpi	r24, 0x0B	; 11
     c1c:	10 f0       	brcs	.+4      	; 0xc22 <main+0x42>
		colorIndex = 0x00;
     c1e:	10 92 ee 01 	sts	0x01EE, r1
	}
	
	if ((PINB&(1<<PB2)) == 0)
     c22:	b2 99       	sbic	0x16, 2	; 22
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <main+0x60>
	{
		brightnessIndex++;
     c26:	80 91 e2 00 	lds	r24, 0x00E2
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 e2 00 	sts	0x00E2, r24
		if (brightnessIndex > 0x05)
     c30:	86 30       	cpi	r24, 0x06	; 6
     c32:	10 f0       	brcs	.+4      	; 0xc38 <main+0x58>
		{
			brightnessIndex = 0;
     c34:	10 92 e2 00 	sts	0x00E2, r1
		}
		EEPROM_write(0x04,brightnessIndex);
     c38:	60 91 e2 00 	lds	r22, 0x00E2
     c3c:	84 e0       	ldi	r24, 0x04	; 4
     c3e:	38 db       	rcall	.-2448   	; 0x2b0 <_Z12EEPROM_writehh>
	}
	BRIGHTNESS_DEVISOR = brightnessList[brightnessIndex];
     c40:	e0 91 e2 00 	lds	r30, 0x00E2
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	e0 56       	subi	r30, 0x60	; 96
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	80 81       	ld	r24, Z
     c4c:	80 93 e1 00 	sts	0x00E1, r24
	
	DDRB|=_BV(ws2812_pin); //Set PB1 as Output.
     c50:	b9 9a       	sbi	0x17, 1	; 23
	setup_Hue_Table();
     c52:	08 db       	rcall	.-2544   	; 0x264 <_Z15setup_Hue_Tablev>

	inceasingHue.h = 0;
     c54:	ec eb       	ldi	r30, 0xBC	; 188
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	10 82       	st	Z, r1
	inceasingHue.s = 255;
     c5a:	8f ef       	ldi	r24, 0xFF	; 255
     c5c:	81 83       	std	Z+1, r24	; 0x01
	inceasingHue.v = 255;
     c5e:	82 83       	std	Z+2, r24	; 0x02
		if (coolDown != 0)
		{
			coolDown--;
		}
		
		inceasingHue.h++;
     c60:	ef 01       	movw	r28, r30
	inceasingHue.v = 255;
	
	
	while(1){	
		
		if (coolDown != 0)
     c62:	80 91 df 00 	lds	r24, 0x00DF
     c66:	88 23       	and	r24, r24
     c68:	19 f0       	breq	.+6      	; 0xc70 <main+0x90>
		{
			coolDown--;
     c6a:	81 50       	subi	r24, 0x01	; 1
     c6c:	80 93 df 00 	sts	0x00DF, r24
		}
		
		inceasingHue.h++;
     c70:	88 81       	ld	r24, Y
     c72:	8f 5f       	subi	r24, 0xFF	; 255
		if (inceasingHue.h == 255)
     c74:	8f 3f       	cpi	r24, 0xFF	; 255
     c76:	11 f0       	breq	.+4      	; 0xc7c <main+0x9c>
		if (coolDown != 0)
		{
			coolDown--;
		}
		
		inceasingHue.h++;
     c78:	88 83       	st	Y, r24
     c7a:	01 c0       	rjmp	.+2      	; 0xc7e <main+0x9e>
		if (inceasingHue.h == 255)
		{
			inceasingHue.h = 0;
     c7c:	18 82       	st	Y, r1
		}
		
		//Mode 0
		if (mode == 0) //Single solid color
     c7e:	80 91 e0 00 	lds	r24, 0x00E0
     c82:	81 11       	cpse	r24, r1
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <main+0xa8>
		{
			mode_0();
     c86:	0e dc       	rcall	.-2020   	; 0x4a4 <_Z6mode_0v>
		} 
		//Mode 1
		if (mode == 1)
     c88:	80 91 e0 00 	lds	r24, 0x00E0
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	09 f4       	brne	.+2      	; 0xc92 <main+0xb2>
		{
			mode_1and2();
     c90:	0a dd       	rcall	.-1516   	; 0x6a6 <_Z10mode_1and2v>
		}
		//Mode 3
		if (mode == 2)
     c92:	80 91 e0 00 	lds	r24, 0x00E0
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	09 f4       	brne	.+2      	; 0xc9c <main+0xbc>
		{
			mode_3();
     c9a:	0d dd       	rcall	.-1510   	; 0x6b6 <_Z6mode_3v>
		}
		//Mode 4
		if (mode == 3)
     c9c:	80 91 e0 00 	lds	r24, 0x00E0
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	09 f4       	brne	.+2      	; 0xca6 <main+0xc6>
		{
			mode_4();
     ca4:	e2 de       	rcall	.-572    	; 0xa6a <_Z6mode_4v>
		}
		//Mode 5
		if (mode == 4)
     ca6:	80 91 e0 00 	lds	r24, 0x00E0
     caa:	84 30       	cpi	r24, 0x04	; 4
     cac:	d1 f6       	brne	.-76     	; 0xc62 <main+0x82>
		{
			mode_5();
     cae:	2a df       	rcall	.-428    	; 0xb04 <_Z6mode_5v>
     cb0:	d8 cf       	rjmp	.-80     	; 0xc62 <main+0x82>

00000cb2 <__subsf3>:
     cb2:	50 58       	subi	r21, 0x80	; 128

00000cb4 <__addsf3>:
     cb4:	bb 27       	eor	r27, r27
     cb6:	aa 27       	eor	r26, r26
     cb8:	0e d0       	rcall	.+28     	; 0xcd6 <__addsf3x>
     cba:	89 c1       	rjmp	.+786    	; 0xfce <__fp_round>
     cbc:	7a d1       	rcall	.+756    	; 0xfb2 <__fp_pscA>
     cbe:	30 f0       	brcs	.+12     	; 0xccc <__addsf3+0x18>
     cc0:	7f d1       	rcall	.+766    	; 0xfc0 <__fp_pscB>
     cc2:	20 f0       	brcs	.+8      	; 0xccc <__addsf3+0x18>
     cc4:	31 f4       	brne	.+12     	; 0xcd2 <__addsf3+0x1e>
     cc6:	9f 3f       	cpi	r25, 0xFF	; 255
     cc8:	11 f4       	brne	.+4      	; 0xcce <__addsf3+0x1a>
     cca:	1e f4       	brtc	.+6      	; 0xcd2 <__addsf3+0x1e>
     ccc:	6f c1       	rjmp	.+734    	; 0xfac <__fp_nan>
     cce:	0e f4       	brtc	.+2      	; 0xcd2 <__addsf3+0x1e>
     cd0:	e0 95       	com	r30
     cd2:	e7 fb       	bst	r30, 7
     cd4:	3c c1       	rjmp	.+632    	; 0xf4e <__fp_inf>

00000cd6 <__addsf3x>:
     cd6:	e9 2f       	mov	r30, r25
     cd8:	8b d1       	rcall	.+790    	; 0xff0 <__fp_split3>
     cda:	80 f3       	brcs	.-32     	; 0xcbc <__addsf3+0x8>
     cdc:	ba 17       	cp	r27, r26
     cde:	62 07       	cpc	r22, r18
     ce0:	73 07       	cpc	r23, r19
     ce2:	84 07       	cpc	r24, r20
     ce4:	95 07       	cpc	r25, r21
     ce6:	18 f0       	brcs	.+6      	; 0xcee <__addsf3x+0x18>
     ce8:	71 f4       	brne	.+28     	; 0xd06 <__addsf3x+0x30>
     cea:	9e f5       	brtc	.+102    	; 0xd52 <__addsf3x+0x7c>
     cec:	ba c1       	rjmp	.+884    	; 0x1062 <__fp_zero>
     cee:	0e f4       	brtc	.+2      	; 0xcf2 <__addsf3x+0x1c>
     cf0:	e0 95       	com	r30
     cf2:	0b 2e       	mov	r0, r27
     cf4:	ba 2f       	mov	r27, r26
     cf6:	a0 2d       	mov	r26, r0
     cf8:	0b 01       	movw	r0, r22
     cfa:	b9 01       	movw	r22, r18
     cfc:	90 01       	movw	r18, r0
     cfe:	0c 01       	movw	r0, r24
     d00:	ca 01       	movw	r24, r20
     d02:	a0 01       	movw	r20, r0
     d04:	11 24       	eor	r1, r1
     d06:	ff 27       	eor	r31, r31
     d08:	59 1b       	sub	r21, r25
     d0a:	99 f0       	breq	.+38     	; 0xd32 <__addsf3x+0x5c>
     d0c:	59 3f       	cpi	r21, 0xF9	; 249
     d0e:	50 f4       	brcc	.+20     	; 0xd24 <__addsf3x+0x4e>
     d10:	50 3e       	cpi	r21, 0xE0	; 224
     d12:	68 f1       	brcs	.+90     	; 0xd6e <__addsf3x+0x98>
     d14:	1a 16       	cp	r1, r26
     d16:	f0 40       	sbci	r31, 0x00	; 0
     d18:	a2 2f       	mov	r26, r18
     d1a:	23 2f       	mov	r18, r19
     d1c:	34 2f       	mov	r19, r20
     d1e:	44 27       	eor	r20, r20
     d20:	58 5f       	subi	r21, 0xF8	; 248
     d22:	f3 cf       	rjmp	.-26     	; 0xd0a <__addsf3x+0x34>
     d24:	46 95       	lsr	r20
     d26:	37 95       	ror	r19
     d28:	27 95       	ror	r18
     d2a:	a7 95       	ror	r26
     d2c:	f0 40       	sbci	r31, 0x00	; 0
     d2e:	53 95       	inc	r21
     d30:	c9 f7       	brne	.-14     	; 0xd24 <__addsf3x+0x4e>
     d32:	7e f4       	brtc	.+30     	; 0xd52 <__addsf3x+0x7c>
     d34:	1f 16       	cp	r1, r31
     d36:	ba 0b       	sbc	r27, r26
     d38:	62 0b       	sbc	r22, r18
     d3a:	73 0b       	sbc	r23, r19
     d3c:	84 0b       	sbc	r24, r20
     d3e:	ba f0       	brmi	.+46     	; 0xd6e <__addsf3x+0x98>
     d40:	91 50       	subi	r25, 0x01	; 1
     d42:	a1 f0       	breq	.+40     	; 0xd6c <__addsf3x+0x96>
     d44:	ff 0f       	add	r31, r31
     d46:	bb 1f       	adc	r27, r27
     d48:	66 1f       	adc	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	88 1f       	adc	r24, r24
     d4e:	c2 f7       	brpl	.-16     	; 0xd40 <__addsf3x+0x6a>
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <__addsf3x+0x98>
     d52:	ba 0f       	add	r27, r26
     d54:	62 1f       	adc	r22, r18
     d56:	73 1f       	adc	r23, r19
     d58:	84 1f       	adc	r24, r20
     d5a:	48 f4       	brcc	.+18     	; 0xd6e <__addsf3x+0x98>
     d5c:	87 95       	ror	r24
     d5e:	77 95       	ror	r23
     d60:	67 95       	ror	r22
     d62:	b7 95       	ror	r27
     d64:	f7 95       	ror	r31
     d66:	9e 3f       	cpi	r25, 0xFE	; 254
     d68:	08 f0       	brcs	.+2      	; 0xd6c <__addsf3x+0x96>
     d6a:	b3 cf       	rjmp	.-154    	; 0xcd2 <__addsf3+0x1e>
     d6c:	93 95       	inc	r25
     d6e:	88 0f       	add	r24, r24
     d70:	08 f0       	brcs	.+2      	; 0xd74 <__addsf3x+0x9e>
     d72:	99 27       	eor	r25, r25
     d74:	ee 0f       	add	r30, r30
     d76:	97 95       	ror	r25
     d78:	87 95       	ror	r24
     d7a:	08 95       	ret

00000d7c <__divsf3>:
     d7c:	0c d0       	rcall	.+24     	; 0xd96 <__divsf3x>
     d7e:	27 c1       	rjmp	.+590    	; 0xfce <__fp_round>
     d80:	1f d1       	rcall	.+574    	; 0xfc0 <__fp_pscB>
     d82:	40 f0       	brcs	.+16     	; 0xd94 <__divsf3+0x18>
     d84:	16 d1       	rcall	.+556    	; 0xfb2 <__fp_pscA>
     d86:	30 f0       	brcs	.+12     	; 0xd94 <__divsf3+0x18>
     d88:	21 f4       	brne	.+8      	; 0xd92 <__divsf3+0x16>
     d8a:	5f 3f       	cpi	r21, 0xFF	; 255
     d8c:	19 f0       	breq	.+6      	; 0xd94 <__divsf3+0x18>
     d8e:	df c0       	rjmp	.+446    	; 0xf4e <__fp_inf>
     d90:	51 11       	cpse	r21, r1
     d92:	68 c1       	rjmp	.+720    	; 0x1064 <__fp_szero>
     d94:	0b c1       	rjmp	.+534    	; 0xfac <__fp_nan>

00000d96 <__divsf3x>:
     d96:	2c d1       	rcall	.+600    	; 0xff0 <__fp_split3>
     d98:	98 f3       	brcs	.-26     	; 0xd80 <__divsf3+0x4>

00000d9a <__divsf3_pse>:
     d9a:	99 23       	and	r25, r25
     d9c:	c9 f3       	breq	.-14     	; 0xd90 <__divsf3+0x14>
     d9e:	55 23       	and	r21, r21
     da0:	b1 f3       	breq	.-20     	; 0xd8e <__divsf3+0x12>
     da2:	95 1b       	sub	r25, r21
     da4:	55 0b       	sbc	r21, r21
     da6:	bb 27       	eor	r27, r27
     da8:	aa 27       	eor	r26, r26
     daa:	62 17       	cp	r22, r18
     dac:	73 07       	cpc	r23, r19
     dae:	84 07       	cpc	r24, r20
     db0:	38 f0       	brcs	.+14     	; 0xdc0 <__divsf3_pse+0x26>
     db2:	9f 5f       	subi	r25, 0xFF	; 255
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	44 1f       	adc	r20, r20
     dbc:	aa 1f       	adc	r26, r26
     dbe:	a9 f3       	breq	.-22     	; 0xdaa <__divsf3_pse+0x10>
     dc0:	33 d0       	rcall	.+102    	; 0xe28 <__divsf3_pse+0x8e>
     dc2:	0e 2e       	mov	r0, r30
     dc4:	3a f0       	brmi	.+14     	; 0xdd4 <__divsf3_pse+0x3a>
     dc6:	e0 e8       	ldi	r30, 0x80	; 128
     dc8:	30 d0       	rcall	.+96     	; 0xe2a <__divsf3_pse+0x90>
     dca:	91 50       	subi	r25, 0x01	; 1
     dcc:	50 40       	sbci	r21, 0x00	; 0
     dce:	e6 95       	lsr	r30
     dd0:	00 1c       	adc	r0, r0
     dd2:	ca f7       	brpl	.-14     	; 0xdc6 <__divsf3_pse+0x2c>
     dd4:	29 d0       	rcall	.+82     	; 0xe28 <__divsf3_pse+0x8e>
     dd6:	fe 2f       	mov	r31, r30
     dd8:	27 d0       	rcall	.+78     	; 0xe28 <__divsf3_pse+0x8e>
     dda:	66 0f       	add	r22, r22
     ddc:	77 1f       	adc	r23, r23
     dde:	88 1f       	adc	r24, r24
     de0:	bb 1f       	adc	r27, r27
     de2:	26 17       	cp	r18, r22
     de4:	37 07       	cpc	r19, r23
     de6:	48 07       	cpc	r20, r24
     de8:	ab 07       	cpc	r26, r27
     dea:	b0 e8       	ldi	r27, 0x80	; 128
     dec:	09 f0       	breq	.+2      	; 0xdf0 <__divsf3_pse+0x56>
     dee:	bb 0b       	sbc	r27, r27
     df0:	80 2d       	mov	r24, r0
     df2:	bf 01       	movw	r22, r30
     df4:	ff 27       	eor	r31, r31
     df6:	93 58       	subi	r25, 0x83	; 131
     df8:	5f 4f       	sbci	r21, 0xFF	; 255
     dfa:	2a f0       	brmi	.+10     	; 0xe06 <__divsf3_pse+0x6c>
     dfc:	9e 3f       	cpi	r25, 0xFE	; 254
     dfe:	51 05       	cpc	r21, r1
     e00:	68 f0       	brcs	.+26     	; 0xe1c <__divsf3_pse+0x82>
     e02:	a5 c0       	rjmp	.+330    	; 0xf4e <__fp_inf>
     e04:	2f c1       	rjmp	.+606    	; 0x1064 <__fp_szero>
     e06:	5f 3f       	cpi	r21, 0xFF	; 255
     e08:	ec f3       	brlt	.-6      	; 0xe04 <__divsf3_pse+0x6a>
     e0a:	98 3e       	cpi	r25, 0xE8	; 232
     e0c:	dc f3       	brlt	.-10     	; 0xe04 <__divsf3_pse+0x6a>
     e0e:	86 95       	lsr	r24
     e10:	77 95       	ror	r23
     e12:	67 95       	ror	r22
     e14:	b7 95       	ror	r27
     e16:	f7 95       	ror	r31
     e18:	9f 5f       	subi	r25, 0xFF	; 255
     e1a:	c9 f7       	brne	.-14     	; 0xe0e <__divsf3_pse+0x74>
     e1c:	88 0f       	add	r24, r24
     e1e:	91 1d       	adc	r25, r1
     e20:	96 95       	lsr	r25
     e22:	87 95       	ror	r24
     e24:	97 f9       	bld	r25, 7
     e26:	08 95       	ret
     e28:	e1 e0       	ldi	r30, 0x01	; 1
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	bb 1f       	adc	r27, r27
     e32:	62 17       	cp	r22, r18
     e34:	73 07       	cpc	r23, r19
     e36:	84 07       	cpc	r24, r20
     e38:	ba 07       	cpc	r27, r26
     e3a:	20 f0       	brcs	.+8      	; 0xe44 <__divsf3_pse+0xaa>
     e3c:	62 1b       	sub	r22, r18
     e3e:	73 0b       	sbc	r23, r19
     e40:	84 0b       	sbc	r24, r20
     e42:	ba 0b       	sbc	r27, r26
     e44:	ee 1f       	adc	r30, r30
     e46:	88 f7       	brcc	.-30     	; 0xe2a <__divsf3_pse+0x90>
     e48:	e0 95       	com	r30
     e4a:	08 95       	ret

00000e4c <__fixsfsi>:
     e4c:	04 d0       	rcall	.+8      	; 0xe56 <__fixunssfsi>
     e4e:	68 94       	set
     e50:	b1 11       	cpse	r27, r1
     e52:	08 c1       	rjmp	.+528    	; 0x1064 <__fp_szero>
     e54:	08 95       	ret

00000e56 <__fixunssfsi>:
     e56:	d4 d0       	rcall	.+424    	; 0x1000 <__fp_splitA>
     e58:	88 f0       	brcs	.+34     	; 0xe7c <__fixunssfsi+0x26>
     e5a:	9f 57       	subi	r25, 0x7F	; 127
     e5c:	90 f0       	brcs	.+36     	; 0xe82 <__fixunssfsi+0x2c>
     e5e:	b9 2f       	mov	r27, r25
     e60:	99 27       	eor	r25, r25
     e62:	b7 51       	subi	r27, 0x17	; 23
     e64:	a0 f0       	brcs	.+40     	; 0xe8e <__fixunssfsi+0x38>
     e66:	d1 f0       	breq	.+52     	; 0xe9c <__fixunssfsi+0x46>
     e68:	66 0f       	add	r22, r22
     e6a:	77 1f       	adc	r23, r23
     e6c:	88 1f       	adc	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	1a f0       	brmi	.+6      	; 0xe78 <__fixunssfsi+0x22>
     e72:	ba 95       	dec	r27
     e74:	c9 f7       	brne	.-14     	; 0xe68 <__fixunssfsi+0x12>
     e76:	12 c0       	rjmp	.+36     	; 0xe9c <__fixunssfsi+0x46>
     e78:	b1 30       	cpi	r27, 0x01	; 1
     e7a:	81 f0       	breq	.+32     	; 0xe9c <__fixunssfsi+0x46>
     e7c:	f2 d0       	rcall	.+484    	; 0x1062 <__fp_zero>
     e7e:	b1 e0       	ldi	r27, 0x01	; 1
     e80:	08 95       	ret
     e82:	ef c0       	rjmp	.+478    	; 0x1062 <__fp_zero>
     e84:	67 2f       	mov	r22, r23
     e86:	78 2f       	mov	r23, r24
     e88:	88 27       	eor	r24, r24
     e8a:	b8 5f       	subi	r27, 0xF8	; 248
     e8c:	39 f0       	breq	.+14     	; 0xe9c <__fixunssfsi+0x46>
     e8e:	b9 3f       	cpi	r27, 0xF9	; 249
     e90:	cc f3       	brlt	.-14     	; 0xe84 <__fixunssfsi+0x2e>
     e92:	86 95       	lsr	r24
     e94:	77 95       	ror	r23
     e96:	67 95       	ror	r22
     e98:	b3 95       	inc	r27
     e9a:	d9 f7       	brne	.-10     	; 0xe92 <__fixunssfsi+0x3c>
     e9c:	3e f4       	brtc	.+14     	; 0xeac <__fixunssfsi+0x56>
     e9e:	90 95       	com	r25
     ea0:	80 95       	com	r24
     ea2:	70 95       	com	r23
     ea4:	61 95       	neg	r22
     ea6:	7f 4f       	sbci	r23, 0xFF	; 255
     ea8:	8f 4f       	sbci	r24, 0xFF	; 255
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	08 95       	ret

00000eae <__floatunsisf>:
     eae:	e8 94       	clt
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <__floatsisf+0x12>

00000eb2 <__floatsisf>:
     eb2:	97 fb       	bst	r25, 7
     eb4:	3e f4       	brtc	.+14     	; 0xec4 <__floatsisf+0x12>
     eb6:	90 95       	com	r25
     eb8:	80 95       	com	r24
     eba:	70 95       	com	r23
     ebc:	61 95       	neg	r22
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	99 23       	and	r25, r25
     ec6:	a9 f0       	breq	.+42     	; 0xef2 <__floatsisf+0x40>
     ec8:	f9 2f       	mov	r31, r25
     eca:	96 e9       	ldi	r25, 0x96	; 150
     ecc:	bb 27       	eor	r27, r27
     ece:	93 95       	inc	r25
     ed0:	f6 95       	lsr	r31
     ed2:	87 95       	ror	r24
     ed4:	77 95       	ror	r23
     ed6:	67 95       	ror	r22
     ed8:	b7 95       	ror	r27
     eda:	f1 11       	cpse	r31, r1
     edc:	f8 cf       	rjmp	.-16     	; 0xece <__floatsisf+0x1c>
     ede:	fa f4       	brpl	.+62     	; 0xf1e <__floatsisf+0x6c>
     ee0:	bb 0f       	add	r27, r27
     ee2:	11 f4       	brne	.+4      	; 0xee8 <__floatsisf+0x36>
     ee4:	60 ff       	sbrs	r22, 0
     ee6:	1b c0       	rjmp	.+54     	; 0xf1e <__floatsisf+0x6c>
     ee8:	6f 5f       	subi	r22, 0xFF	; 255
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <__floatsisf+0x6c>
     ef2:	88 23       	and	r24, r24
     ef4:	11 f0       	breq	.+4      	; 0xefa <__floatsisf+0x48>
     ef6:	96 e9       	ldi	r25, 0x96	; 150
     ef8:	11 c0       	rjmp	.+34     	; 0xf1c <__floatsisf+0x6a>
     efa:	77 23       	and	r23, r23
     efc:	21 f0       	breq	.+8      	; 0xf06 <__floatsisf+0x54>
     efe:	9e e8       	ldi	r25, 0x8E	; 142
     f00:	87 2f       	mov	r24, r23
     f02:	76 2f       	mov	r23, r22
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <__floatsisf+0x5e>
     f06:	66 23       	and	r22, r22
     f08:	71 f0       	breq	.+28     	; 0xf26 <__floatsisf+0x74>
     f0a:	96 e8       	ldi	r25, 0x86	; 134
     f0c:	86 2f       	mov	r24, r22
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	2a f0       	brmi	.+10     	; 0xf1e <__floatsisf+0x6c>
     f14:	9a 95       	dec	r25
     f16:	66 0f       	add	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	da f7       	brpl	.-10     	; 0xf14 <__floatsisf+0x62>
     f1e:	88 0f       	add	r24, r24
     f20:	96 95       	lsr	r25
     f22:	87 95       	ror	r24
     f24:	97 f9       	bld	r25, 7
     f26:	08 95       	ret

00000f28 <floor>:
     f28:	85 d0       	rcall	.+266    	; 0x1034 <__fp_trunc>
     f2a:	80 f0       	brcs	.+32     	; 0xf4c <floor+0x24>
     f2c:	9f 37       	cpi	r25, 0x7F	; 127
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <floor+0x18>
     f30:	91 11       	cpse	r25, r1
     f32:	0e f0       	brts	.+2      	; 0xf36 <floor+0xe>
     f34:	97 c0       	rjmp	.+302    	; 0x1064 <__fp_szero>
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e8       	ldi	r24, 0x80	; 128
     f3c:	9f eb       	ldi	r25, 0xBF	; 191
     f3e:	08 95       	ret
     f40:	26 f4       	brtc	.+8      	; 0xf4a <floor+0x22>
     f42:	1b 16       	cp	r1, r27
     f44:	61 1d       	adc	r22, r1
     f46:	71 1d       	adc	r23, r1
     f48:	81 1d       	adc	r24, r1
     f4a:	07 c0       	rjmp	.+14     	; 0xf5a <__fp_mintl>
     f4c:	21 c0       	rjmp	.+66     	; 0xf90 <__fp_mpack>

00000f4e <__fp_inf>:
     f4e:	97 f9       	bld	r25, 7
     f50:	9f 67       	ori	r25, 0x7F	; 127
     f52:	80 e8       	ldi	r24, 0x80	; 128
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	08 95       	ret

00000f5a <__fp_mintl>:
     f5a:	88 23       	and	r24, r24
     f5c:	71 f4       	brne	.+28     	; 0xf7a <__fp_mintl+0x20>
     f5e:	77 23       	and	r23, r23
     f60:	21 f0       	breq	.+8      	; 0xf6a <__fp_mintl+0x10>
     f62:	98 50       	subi	r25, 0x08	; 8
     f64:	87 2b       	or	r24, r23
     f66:	76 2f       	mov	r23, r22
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <__fp_mintl+0x1e>
     f6a:	66 23       	and	r22, r22
     f6c:	11 f4       	brne	.+4      	; 0xf72 <__fp_mintl+0x18>
     f6e:	99 27       	eor	r25, r25
     f70:	0d c0       	rjmp	.+26     	; 0xf8c <__fp_mintl+0x32>
     f72:	90 51       	subi	r25, 0x10	; 16
     f74:	86 2b       	or	r24, r22
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	2a f0       	brmi	.+10     	; 0xf86 <__fp_mintl+0x2c>
     f7c:	9a 95       	dec	r25
     f7e:	66 0f       	add	r22, r22
     f80:	77 1f       	adc	r23, r23
     f82:	88 1f       	adc	r24, r24
     f84:	da f7       	brpl	.-10     	; 0xf7c <__fp_mintl+0x22>
     f86:	88 0f       	add	r24, r24
     f88:	96 95       	lsr	r25
     f8a:	87 95       	ror	r24
     f8c:	97 f9       	bld	r25, 7
     f8e:	08 95       	ret

00000f90 <__fp_mpack>:
     f90:	9f 3f       	cpi	r25, 0xFF	; 255
     f92:	31 f0       	breq	.+12     	; 0xfa0 <__fp_mpack_finite+0xc>

00000f94 <__fp_mpack_finite>:
     f94:	91 50       	subi	r25, 0x01	; 1
     f96:	20 f4       	brcc	.+8      	; 0xfa0 <__fp_mpack_finite+0xc>
     f98:	87 95       	ror	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	b7 95       	ror	r27
     fa0:	88 0f       	add	r24, r24
     fa2:	91 1d       	adc	r25, r1
     fa4:	96 95       	lsr	r25
     fa6:	87 95       	ror	r24
     fa8:	97 f9       	bld	r25, 7
     faa:	08 95       	ret

00000fac <__fp_nan>:
     fac:	9f ef       	ldi	r25, 0xFF	; 255
     fae:	80 ec       	ldi	r24, 0xC0	; 192
     fb0:	08 95       	ret

00000fb2 <__fp_pscA>:
     fb2:	00 24       	eor	r0, r0
     fb4:	0a 94       	dec	r0
     fb6:	16 16       	cp	r1, r22
     fb8:	17 06       	cpc	r1, r23
     fba:	18 06       	cpc	r1, r24
     fbc:	09 06       	cpc	r0, r25
     fbe:	08 95       	ret

00000fc0 <__fp_pscB>:
     fc0:	00 24       	eor	r0, r0
     fc2:	0a 94       	dec	r0
     fc4:	12 16       	cp	r1, r18
     fc6:	13 06       	cpc	r1, r19
     fc8:	14 06       	cpc	r1, r20
     fca:	05 06       	cpc	r0, r21
     fcc:	08 95       	ret

00000fce <__fp_round>:
     fce:	09 2e       	mov	r0, r25
     fd0:	03 94       	inc	r0
     fd2:	00 0c       	add	r0, r0
     fd4:	11 f4       	brne	.+4      	; 0xfda <__fp_round+0xc>
     fd6:	88 23       	and	r24, r24
     fd8:	52 f0       	brmi	.+20     	; 0xfee <__fp_round+0x20>
     fda:	bb 0f       	add	r27, r27
     fdc:	40 f4       	brcc	.+16     	; 0xfee <__fp_round+0x20>
     fde:	bf 2b       	or	r27, r31
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <__fp_round+0x18>
     fe2:	60 ff       	sbrs	r22, 0
     fe4:	04 c0       	rjmp	.+8      	; 0xfee <__fp_round+0x20>
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8f 4f       	sbci	r24, 0xFF	; 255
     fec:	9f 4f       	sbci	r25, 0xFF	; 255
     fee:	08 95       	ret

00000ff0 <__fp_split3>:
     ff0:	57 fd       	sbrc	r21, 7
     ff2:	90 58       	subi	r25, 0x80	; 128
     ff4:	44 0f       	add	r20, r20
     ff6:	55 1f       	adc	r21, r21
     ff8:	59 f0       	breq	.+22     	; 0x1010 <__fp_splitA+0x10>
     ffa:	5f 3f       	cpi	r21, 0xFF	; 255
     ffc:	71 f0       	breq	.+28     	; 0x101a <__fp_splitA+0x1a>
     ffe:	47 95       	ror	r20

00001000 <__fp_splitA>:
    1000:	88 0f       	add	r24, r24
    1002:	97 fb       	bst	r25, 7
    1004:	99 1f       	adc	r25, r25
    1006:	61 f0       	breq	.+24     	; 0x1020 <__fp_splitA+0x20>
    1008:	9f 3f       	cpi	r25, 0xFF	; 255
    100a:	79 f0       	breq	.+30     	; 0x102a <__fp_splitA+0x2a>
    100c:	87 95       	ror	r24
    100e:	08 95       	ret
    1010:	12 16       	cp	r1, r18
    1012:	13 06       	cpc	r1, r19
    1014:	14 06       	cpc	r1, r20
    1016:	55 1f       	adc	r21, r21
    1018:	f2 cf       	rjmp	.-28     	; 0xffe <__fp_split3+0xe>
    101a:	46 95       	lsr	r20
    101c:	f1 df       	rcall	.-30     	; 0x1000 <__fp_splitA>
    101e:	08 c0       	rjmp	.+16     	; 0x1030 <__fp_splitA+0x30>
    1020:	16 16       	cp	r1, r22
    1022:	17 06       	cpc	r1, r23
    1024:	18 06       	cpc	r1, r24
    1026:	99 1f       	adc	r25, r25
    1028:	f1 cf       	rjmp	.-30     	; 0x100c <__fp_splitA+0xc>
    102a:	86 95       	lsr	r24
    102c:	71 05       	cpc	r23, r1
    102e:	61 05       	cpc	r22, r1
    1030:	08 94       	sec
    1032:	08 95       	ret

00001034 <__fp_trunc>:
    1034:	e5 df       	rcall	.-54     	; 0x1000 <__fp_splitA>
    1036:	a0 f0       	brcs	.+40     	; 0x1060 <__fp_trunc+0x2c>
    1038:	be e7       	ldi	r27, 0x7E	; 126
    103a:	b9 17       	cp	r27, r25
    103c:	88 f4       	brcc	.+34     	; 0x1060 <__fp_trunc+0x2c>
    103e:	bb 27       	eor	r27, r27
    1040:	9f 38       	cpi	r25, 0x8F	; 143
    1042:	60 f4       	brcc	.+24     	; 0x105c <__fp_trunc+0x28>
    1044:	16 16       	cp	r1, r22
    1046:	b1 1d       	adc	r27, r1
    1048:	67 2f       	mov	r22, r23
    104a:	78 2f       	mov	r23, r24
    104c:	88 27       	eor	r24, r24
    104e:	98 5f       	subi	r25, 0xF8	; 248
    1050:	f7 cf       	rjmp	.-18     	; 0x1040 <__fp_trunc+0xc>
    1052:	86 95       	lsr	r24
    1054:	77 95       	ror	r23
    1056:	67 95       	ror	r22
    1058:	b1 1d       	adc	r27, r1
    105a:	93 95       	inc	r25
    105c:	96 39       	cpi	r25, 0x96	; 150
    105e:	c8 f3       	brcs	.-14     	; 0x1052 <__fp_trunc+0x1e>
    1060:	08 95       	ret

00001062 <__fp_zero>:
    1062:	e8 94       	clt

00001064 <__fp_szero>:
    1064:	bb 27       	eor	r27, r27
    1066:	66 27       	eor	r22, r22
    1068:	77 27       	eor	r23, r23
    106a:	cb 01       	movw	r24, r22
    106c:	97 f9       	bld	r25, 7
    106e:	08 95       	ret

00001070 <__mulsf3>:
    1070:	0a d0       	rcall	.+20     	; 0x1086 <__mulsf3x>
    1072:	ad cf       	rjmp	.-166    	; 0xfce <__fp_round>
    1074:	9e df       	rcall	.-196    	; 0xfb2 <__fp_pscA>
    1076:	28 f0       	brcs	.+10     	; 0x1082 <__mulsf3+0x12>
    1078:	a3 df       	rcall	.-186    	; 0xfc0 <__fp_pscB>
    107a:	18 f0       	brcs	.+6      	; 0x1082 <__mulsf3+0x12>
    107c:	95 23       	and	r25, r21
    107e:	09 f0       	breq	.+2      	; 0x1082 <__mulsf3+0x12>
    1080:	66 cf       	rjmp	.-308    	; 0xf4e <__fp_inf>
    1082:	94 cf       	rjmp	.-216    	; 0xfac <__fp_nan>
    1084:	ef cf       	rjmp	.-34     	; 0x1064 <__fp_szero>

00001086 <__mulsf3x>:
    1086:	b4 df       	rcall	.-152    	; 0xff0 <__fp_split3>
    1088:	a8 f3       	brcs	.-22     	; 0x1074 <__mulsf3+0x4>

0000108a <__mulsf3_pse>:
    108a:	99 23       	and	r25, r25
    108c:	d9 f3       	breq	.-10     	; 0x1084 <__mulsf3+0x14>
    108e:	55 23       	and	r21, r21
    1090:	c9 f3       	breq	.-14     	; 0x1084 <__mulsf3+0x14>
    1092:	95 0f       	add	r25, r21
    1094:	50 e0       	ldi	r21, 0x00	; 0
    1096:	55 1f       	adc	r21, r21
    1098:	aa 27       	eor	r26, r26
    109a:	ee 27       	eor	r30, r30
    109c:	ff 27       	eor	r31, r31
    109e:	bb 27       	eor	r27, r27
    10a0:	00 24       	eor	r0, r0
    10a2:	08 94       	sec
    10a4:	67 95       	ror	r22
    10a6:	20 f4       	brcc	.+8      	; 0x10b0 <__mulsf3_pse+0x26>
    10a8:	e2 0f       	add	r30, r18
    10aa:	f3 1f       	adc	r31, r19
    10ac:	b4 1f       	adc	r27, r20
    10ae:	0a 1e       	adc	r0, r26
    10b0:	22 0f       	add	r18, r18
    10b2:	33 1f       	adc	r19, r19
    10b4:	44 1f       	adc	r20, r20
    10b6:	aa 1f       	adc	r26, r26
    10b8:	66 95       	lsr	r22
    10ba:	a9 f7       	brne	.-22     	; 0x10a6 <__mulsf3_pse+0x1c>
    10bc:	77 95       	ror	r23
    10be:	30 f4       	brcc	.+12     	; 0x10cc <__mulsf3_pse+0x42>
    10c0:	f3 0f       	add	r31, r19
    10c2:	b4 1f       	adc	r27, r20
    10c4:	0a 1e       	adc	r0, r26
    10c6:	12 1e       	adc	r1, r18
    10c8:	08 f4       	brcc	.+2      	; 0x10cc <__mulsf3_pse+0x42>
    10ca:	63 95       	inc	r22
    10cc:	33 0f       	add	r19, r19
    10ce:	44 1f       	adc	r20, r20
    10d0:	aa 1f       	adc	r26, r26
    10d2:	22 1f       	adc	r18, r18
    10d4:	76 95       	lsr	r23
    10d6:	99 f7       	brne	.-26     	; 0x10be <__mulsf3_pse+0x34>
    10d8:	87 95       	ror	r24
    10da:	20 f4       	brcc	.+8      	; 0x10e4 <__mulsf3_pse+0x5a>
    10dc:	b4 0f       	add	r27, r20
    10de:	0a 1e       	adc	r0, r26
    10e0:	12 1e       	adc	r1, r18
    10e2:	63 1f       	adc	r22, r19
    10e4:	44 0f       	add	r20, r20
    10e6:	aa 1f       	adc	r26, r26
    10e8:	22 1f       	adc	r18, r18
    10ea:	33 1f       	adc	r19, r19
    10ec:	86 95       	lsr	r24
    10ee:	a9 f7       	brne	.-22     	; 0x10da <__mulsf3_pse+0x50>
    10f0:	86 2f       	mov	r24, r22
    10f2:	71 2d       	mov	r23, r1
    10f4:	60 2d       	mov	r22, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	9f 57       	subi	r25, 0x7F	; 127
    10fa:	50 40       	sbci	r21, 0x00	; 0
    10fc:	8a f0       	brmi	.+34     	; 0x1120 <__mulsf3_pse+0x96>
    10fe:	e1 f0       	breq	.+56     	; 0x1138 <__mulsf3_pse+0xae>
    1100:	88 23       	and	r24, r24
    1102:	4a f0       	brmi	.+18     	; 0x1116 <__mulsf3_pse+0x8c>
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	bb 1f       	adc	r27, r27
    110a:	66 1f       	adc	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	88 1f       	adc	r24, r24
    1110:	91 50       	subi	r25, 0x01	; 1
    1112:	50 40       	sbci	r21, 0x00	; 0
    1114:	a9 f7       	brne	.-22     	; 0x1100 <__mulsf3_pse+0x76>
    1116:	9e 3f       	cpi	r25, 0xFE	; 254
    1118:	51 05       	cpc	r21, r1
    111a:	70 f0       	brcs	.+28     	; 0x1138 <__mulsf3_pse+0xae>
    111c:	18 cf       	rjmp	.-464    	; 0xf4e <__fp_inf>
    111e:	a2 cf       	rjmp	.-188    	; 0x1064 <__fp_szero>
    1120:	5f 3f       	cpi	r21, 0xFF	; 255
    1122:	ec f3       	brlt	.-6      	; 0x111e <__mulsf3_pse+0x94>
    1124:	98 3e       	cpi	r25, 0xE8	; 232
    1126:	dc f3       	brlt	.-10     	; 0x111e <__mulsf3_pse+0x94>
    1128:	86 95       	lsr	r24
    112a:	77 95       	ror	r23
    112c:	67 95       	ror	r22
    112e:	b7 95       	ror	r27
    1130:	f7 95       	ror	r31
    1132:	e7 95       	ror	r30
    1134:	9f 5f       	subi	r25, 0xFF	; 255
    1136:	c1 f7       	brne	.-16     	; 0x1128 <__mulsf3_pse+0x9e>
    1138:	fe 2b       	or	r31, r30
    113a:	88 0f       	add	r24, r24
    113c:	91 1d       	adc	r25, r1
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__udivmodqi4>:
    1146:	99 1b       	sub	r25, r25
    1148:	79 e0       	ldi	r23, 0x09	; 9
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <__udivmodqi4_ep>

0000114c <__udivmodqi4_loop>:
    114c:	99 1f       	adc	r25, r25
    114e:	96 17       	cp	r25, r22
    1150:	08 f0       	brcs	.+2      	; 0x1154 <__udivmodqi4_ep>
    1152:	96 1b       	sub	r25, r22

00001154 <__udivmodqi4_ep>:
    1154:	88 1f       	adc	r24, r24
    1156:	7a 95       	dec	r23
    1158:	c9 f7       	brne	.-14     	; 0x114c <__udivmodqi4_loop>
    115a:	80 95       	com	r24
    115c:	08 95       	ret

0000115e <do_rand>:
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e4 eb       	ldi	r30, 0xB4	; 180
    1164:	f8 e0       	ldi	r31, 0x08	; 8
    1166:	8a c0       	rjmp	.+276    	; 0x127c <__prologue_saves__+0xc>
    1168:	ec 01       	movw	r28, r24
    116a:	68 81       	ld	r22, Y
    116c:	79 81       	ldd	r23, Y+1	; 0x01
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	61 15       	cp	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	81 05       	cpc	r24, r1
    1178:	91 05       	cpc	r25, r1
    117a:	21 f4       	brne	.+8      	; 0x1184 <do_rand+0x26>
    117c:	64 e2       	ldi	r22, 0x24	; 36
    117e:	79 ed       	ldi	r23, 0xD9	; 217
    1180:	8b e5       	ldi	r24, 0x5B	; 91
    1182:	97 e0       	ldi	r25, 0x07	; 7
    1184:	2d e1       	ldi	r18, 0x1D	; 29
    1186:	33 ef       	ldi	r19, 0xF3	; 243
    1188:	41 e0       	ldi	r20, 0x01	; 1
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	38 d0       	rcall	.+112    	; 0x11fe <__divmodsi4>
    118e:	49 01       	movw	r8, r18
    1190:	5a 01       	movw	r10, r20
    1192:	27 ea       	ldi	r18, 0xA7	; 167
    1194:	31 e4       	ldi	r19, 0x41	; 65
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	4d d0       	rcall	.+154    	; 0x1236 <__mulsidi3>
    119c:	69 01       	movw	r12, r18
    119e:	7a 01       	movw	r14, r20
    11a0:	c5 01       	movw	r24, r10
    11a2:	b4 01       	movw	r22, r8
    11a4:	2c ee       	ldi	r18, 0xEC	; 236
    11a6:	34 ef       	ldi	r19, 0xF4	; 244
    11a8:	4f ef       	ldi	r20, 0xFF	; 255
    11aa:	5f ef       	ldi	r21, 0xFF	; 255
    11ac:	44 d0       	rcall	.+136    	; 0x1236 <__mulsidi3>
    11ae:	02 2f       	mov	r16, r18
    11b0:	13 2f       	mov	r17, r19
    11b2:	9a 01       	movw	r18, r20
    11b4:	d7 01       	movw	r26, r14
    11b6:	c6 01       	movw	r24, r12
    11b8:	80 0f       	add	r24, r16
    11ba:	91 1f       	adc	r25, r17
    11bc:	a2 1f       	adc	r26, r18
    11be:	b3 1f       	adc	r27, r19
    11c0:	b7 ff       	sbrs	r27, 7
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <do_rand+0x6c>
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	a1 09       	sbc	r26, r1
    11c8:	b0 48       	sbci	r27, 0x80	; 128
    11ca:	88 83       	st	Y, r24
    11cc:	99 83       	std	Y+1, r25	; 0x01
    11ce:	aa 83       	std	Y+2, r26	; 0x02
    11d0:	bb 83       	std	Y+3, r27	; 0x03
    11d2:	9f 77       	andi	r25, 0x7F	; 127
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	ec e0       	ldi	r30, 0x0C	; 12
    11da:	6c c0       	rjmp	.+216    	; 0x12b4 <__epilogue_restores__+0xc>

000011dc <rand_r>:
    11dc:	c0 df       	rcall	.-128    	; 0x115e <do_rand>
    11de:	08 95       	ret

000011e0 <rand>:
    11e0:	80 e6       	ldi	r24, 0x60	; 96
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	bc df       	rcall	.-136    	; 0x115e <do_rand>
    11e6:	08 95       	ret

000011e8 <srand>:
    11e8:	a0 e0       	ldi	r26, 0x00	; 0
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	80 93 60 00 	sts	0x0060, r24
    11f0:	90 93 61 00 	sts	0x0061, r25
    11f4:	a0 93 62 00 	sts	0x0062, r26
    11f8:	b0 93 63 00 	sts	0x0063, r27
    11fc:	08 95       	ret

000011fe <__divmodsi4>:
    11fe:	05 2e       	mov	r0, r21
    1200:	97 fb       	bst	r25, 7
    1202:	16 f4       	brtc	.+4      	; 0x1208 <__divmodsi4+0xa>
    1204:	00 94       	com	r0
    1206:	0f d0       	rcall	.+30     	; 0x1226 <__negsi2>
    1208:	57 fd       	sbrc	r21, 7
    120a:	05 d0       	rcall	.+10     	; 0x1216 <__divmodsi4_neg2>
    120c:	68 d0       	rcall	.+208    	; 0x12de <__udivmodsi4>
    120e:	07 fc       	sbrc	r0, 7
    1210:	02 d0       	rcall	.+4      	; 0x1216 <__divmodsi4_neg2>
    1212:	46 f4       	brtc	.+16     	; 0x1224 <__divmodsi4_exit>
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <__negsi2>

00001216 <__divmodsi4_neg2>:
    1216:	50 95       	com	r21
    1218:	40 95       	com	r20
    121a:	30 95       	com	r19
    121c:	21 95       	neg	r18
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	4f 4f       	sbci	r20, 0xFF	; 255
    1222:	5f 4f       	sbci	r21, 0xFF	; 255

00001224 <__divmodsi4_exit>:
    1224:	08 95       	ret

00001226 <__negsi2>:
    1226:	90 95       	com	r25
    1228:	80 95       	com	r24
    122a:	70 95       	com	r23
    122c:	61 95       	neg	r22
    122e:	7f 4f       	sbci	r23, 0xFF	; 255
    1230:	8f 4f       	sbci	r24, 0xFF	; 255
    1232:	9f 4f       	sbci	r25, 0xFF	; 255
    1234:	08 95       	ret

00001236 <__mulsidi3>:
    1236:	68 94       	set
    1238:	00 13       	cpse	r16, r16

0000123a <__umulsidi3>:
    123a:	e8 94       	clt
    123c:	a0 e0       	ldi	r26, 0x00	; 0
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e3 e2       	ldi	r30, 0x23	; 35
    1242:	f9 e0       	ldi	r31, 0x09	; 9
    1244:	1d c0       	rjmp	.+58     	; 0x1280 <__prologue_saves__+0x10>
    1246:	ef ef       	ldi	r30, 0xFF	; 255
    1248:	e7 f9       	bld	r30, 7
    124a:	59 01       	movw	r10, r18
    124c:	6a 01       	movw	r12, r20
    124e:	5e 23       	and	r21, r30
    1250:	55 0f       	add	r21, r21
    1252:	ee 08       	sbc	r14, r14
    1254:	fe 2c       	mov	r15, r14
    1256:	87 01       	movw	r16, r14
    1258:	9b 01       	movw	r18, r22
    125a:	ac 01       	movw	r20, r24
    125c:	9e 23       	and	r25, r30
    125e:	99 0f       	add	r25, r25
    1260:	66 0b       	sbc	r22, r22
    1262:	76 2f       	mov	r23, r22
    1264:	cb 01       	movw	r24, r22
    1266:	5d d0       	rcall	.+186    	; 0x1322 <__muldi3>
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	ea e0       	ldi	r30, 0x0A	; 10
    126e:	24 c0       	rjmp	.+72     	; 0x12b8 <__epilogue_restores__+0x10>

00001270 <__prologue_saves__>:
    1270:	2f 92       	push	r2
    1272:	3f 92       	push	r3
    1274:	4f 92       	push	r4
    1276:	5f 92       	push	r5
    1278:	6f 92       	push	r6
    127a:	7f 92       	push	r7
    127c:	8f 92       	push	r8
    127e:	9f 92       	push	r9
    1280:	af 92       	push	r10
    1282:	bf 92       	push	r11
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	ca 1b       	sub	r28, r26
    129a:	db 0b       	sbc	r29, r27
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	09 94       	ijmp

000012a8 <__epilogue_restores__>:
    12a8:	2a 88       	ldd	r2, Y+18	; 0x12
    12aa:	39 88       	ldd	r3, Y+17	; 0x11
    12ac:	48 88       	ldd	r4, Y+16	; 0x10
    12ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    12b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    12b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    12b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ba:	b9 84       	ldd	r11, Y+9	; 0x09
    12bc:	c8 84       	ldd	r12, Y+8	; 0x08
    12be:	df 80       	ldd	r13, Y+7	; 0x07
    12c0:	ee 80       	ldd	r14, Y+6	; 0x06
    12c2:	fd 80       	ldd	r15, Y+5	; 0x05
    12c4:	0c 81       	ldd	r16, Y+4	; 0x04
    12c6:	1b 81       	ldd	r17, Y+3	; 0x03
    12c8:	aa 81       	ldd	r26, Y+2	; 0x02
    12ca:	b9 81       	ldd	r27, Y+1	; 0x01
    12cc:	ce 0f       	add	r28, r30
    12ce:	d1 1d       	adc	r29, r1
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	f8 94       	cli
    12d4:	de bf       	out	0x3e, r29	; 62
    12d6:	0f be       	out	0x3f, r0	; 63
    12d8:	cd bf       	out	0x3d, r28	; 61
    12da:	ed 01       	movw	r28, r26
    12dc:	08 95       	ret

000012de <__udivmodsi4>:
    12de:	a1 e2       	ldi	r26, 0x21	; 33
    12e0:	1a 2e       	mov	r1, r26
    12e2:	aa 1b       	sub	r26, r26
    12e4:	bb 1b       	sub	r27, r27
    12e6:	fd 01       	movw	r30, r26
    12e8:	0d c0       	rjmp	.+26     	; 0x1304 <__udivmodsi4_ep>

000012ea <__udivmodsi4_loop>:
    12ea:	aa 1f       	adc	r26, r26
    12ec:	bb 1f       	adc	r27, r27
    12ee:	ee 1f       	adc	r30, r30
    12f0:	ff 1f       	adc	r31, r31
    12f2:	a2 17       	cp	r26, r18
    12f4:	b3 07       	cpc	r27, r19
    12f6:	e4 07       	cpc	r30, r20
    12f8:	f5 07       	cpc	r31, r21
    12fa:	20 f0       	brcs	.+8      	; 0x1304 <__udivmodsi4_ep>
    12fc:	a2 1b       	sub	r26, r18
    12fe:	b3 0b       	sbc	r27, r19
    1300:	e4 0b       	sbc	r30, r20
    1302:	f5 0b       	sbc	r31, r21

00001304 <__udivmodsi4_ep>:
    1304:	66 1f       	adc	r22, r22
    1306:	77 1f       	adc	r23, r23
    1308:	88 1f       	adc	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	1a 94       	dec	r1
    130e:	69 f7       	brne	.-38     	; 0x12ea <__udivmodsi4_loop>
    1310:	60 95       	com	r22
    1312:	70 95       	com	r23
    1314:	80 95       	com	r24
    1316:	90 95       	com	r25
    1318:	9b 01       	movw	r18, r22
    131a:	ac 01       	movw	r20, r24
    131c:	bd 01       	movw	r22, r26
    131e:	cf 01       	movw	r24, r30
    1320:	08 95       	ret

00001322 <__muldi3>:
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	9f 92       	push	r9
    1328:	a0 e4       	ldi	r26, 0x40	; 64
    132a:	9a 2e       	mov	r9, r26
    132c:	00 24       	eor	r0, r0
    132e:	d0 01       	movw	r26, r0
    1330:	e0 01       	movw	r28, r0
    1332:	f0 01       	movw	r30, r0
    1334:	16 95       	lsr	r17
    1336:	07 95       	ror	r16
    1338:	f7 94       	ror	r15
    133a:	e7 94       	ror	r14
    133c:	d7 94       	ror	r13
    133e:	c7 94       	ror	r12
    1340:	b7 94       	ror	r11
    1342:	a7 94       	ror	r10
    1344:	48 f4       	brcc	.+18     	; 0x1358 <__muldi3+0x36>
    1346:	10 68       	ori	r17, 0x80	; 128
    1348:	a2 0f       	add	r26, r18
    134a:	b3 1f       	adc	r27, r19
    134c:	c4 1f       	adc	r28, r20
    134e:	d5 1f       	adc	r29, r21
    1350:	e6 1f       	adc	r30, r22
    1352:	f7 1f       	adc	r31, r23
    1354:	08 1e       	adc	r0, r24
    1356:	19 1e       	adc	r1, r25
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	44 1f       	adc	r20, r20
    135e:	55 1f       	adc	r21, r21
    1360:	66 1f       	adc	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	88 1f       	adc	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	9a 94       	dec	r9
    136a:	21 f7       	brne	.-56     	; 0x1334 <__muldi3+0x12>
    136c:	9d 01       	movw	r18, r26
    136e:	ae 01       	movw	r20, r28
    1370:	bf 01       	movw	r22, r30
    1372:	c0 01       	movw	r24, r0
    1374:	11 24       	eor	r1, r1
    1376:	9f 90       	pop	r9
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <_exit>:
    137e:	f8 94       	cli

00001380 <__stop_program>:
    1380:	ff cf       	rjmp	.-2      	; 0x1380 <__stop_program>
